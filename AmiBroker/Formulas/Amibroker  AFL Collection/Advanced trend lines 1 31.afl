_SECTION_BEGIN("Advanced Trend Lines"); 
function TD_Supply()
{
   return ( H > Ref(H, 1) AND H > Ref(H, -1) AND H > Ref(C, -2));
}
function TD_Demand()
{
   return ( L < Ref(L, 1) AND L < Ref(L, -1) AND L < Ref(C, -2));
}

function IsTD_Supply(n)
{
   n = (BarCount - 1) - n;
   return LastValue( Ref(H, -n) > Ref(H, -n+1) AND Ref(H, -n) > Ref(H, -n-1) AND Ref(H, -n) > Ref(C, -n-2));
}
function IsTD_Demand(n)
{
   n = (BarCount - 1) - n;
   return LastValue( Ref(L, -n) < Ref(L, -n+1) AND Ref(L, -n) < Ref(L, -n-1) AND Ref(L, -n) < Ref(C, -n-2));
}
function GetXSupport(Lo, Percentage, Back)
{
 return ((BarCount - 1) - LastValue(TroughBars(Lo, Percentage,Back)));
}
function GetYSupport(Lo, Percentage, Back)
{
 return (LastValue(Trough(Lo, Percentage, back)));
}

function GetXResistance(Hi, Percentage, Back)
{
 return ((BarCount - 1) -LastValue(PeakBars(Hi, Percentage, Back)));
}
function GetYResistance(Hi, Percentage, Back)
{
 return (LastValue(Peak(Hi, Percentage, Back)));
}
////////////////////////////////////////////////////////////////////////
//Parameters
Percentage    = Param("Percentage", 0.5, 0.01, 100. ,0.01);
Lines          = Param("Lines?", 5, 1, BarCount-2);
DrawR          = ParamList("Resistance Points", "Off|High to High|High to Low", 1);
DrawS          = ParamList("Support Points", "Off|Low to Low|Low to High", 1);
DrawAllLines    = ParamToggle("Draw All Lines?", "No|Yes", 1);
Method       = ParamToggle("Method", "TD Points|ZigZag",1);
ShowTDP       = ParamToggle("Show TD Pionts", "No|Yes");
AllOrDownR    = ParamToggle("Resistance Direction", "All|Down");
AllOrUpS       = ParamToggle("Support Direction", "All|Up");
////////////////////////////////////////////////////////////////////////
Main = C;
Con = ConS = ConR = 1;
if(DrawS=="Low to Low")
{
   Support1 = L;
   Support2 = L;
}
else
{
   Support1 = L;
   Support2 = H;
}
if(DrawR=="High to High")
{
   Resistance1 = H;
   Resistance2 = H;
}
else
{
   Resistance1 = H;
   Resistance2 = L;
}
////////////////////////////////////////////////////////////////////////
//Plotting Area
Plot(Main, "", IIf(MACD(3,34)>Signal(3,34,10),colorGreen, colorRed), styleCandle);
if(DrawAllLines)
for(i = 2; i<=Lines+1; i++)
{
   if(DrawS!="Off")
   {
      x0 = GetXSupport(Support1, Percentage, i);
      x1 = GetXSupport(Support2, Percentage, i-1);
      y0 = GetYSupport(Support1, Percentage, i);
      y1 = GetYSupport(Support2, Percentage, i-1);
      x = LineArray(x0, y0, x1, y1, 1);
      if(!Method)
         Con = (IsTD_Demand(x0) AND IsTD_Demand(x1));
      if(AllOrUpS) ConS = y0 < y1;
      if(Con AND ConS)
         Plot(x, "", colorLightBlue, styleLine|styleThick);
   }
   if(DrawR!="Off")
   {
      x0 = GetXResistance(Resistance1, Percentage, i);
      x1 = GetXResistance(Resistance2, Percentage, i-1);
      y0 = GetYResistance(Resistance1, Percentage, i);
      y1 = GetYResistance(Resistance2, Percentage, i-1);
      x = LineArray(x0, y0, x1, y1, 1);
      if(!Method)
         Con = (IsTD_Supply(x0) AND IsTD_Supply(x1));
      if(AllOrDownR) ConR = y0 > y1;
      if(Con AND ConR)
         Plot(x, "", colorRed , styleLine|styleThick);
   }
}
else
{
   if(DrawS!="Off")
   {
      x0 = GetXSupport(Support1, Percentage, Lines+1);
      x1 = GetXSupport(Support2, Percentage, Lines);
      y0 = GetYSupport(Support1, Percentage, Lines+1);
      y1 = GetYSupport(Support2, Percentage, Lines);
      x = LineArray(x0, y0, x1, y1, 1);
      if(!Method)
         Con = (IsTD_Demand(x0) AND IsTD_Demand(x1));
      if(AllOrUpS) ConS = y0 < y1;
      if(Con AND ConS)
         Plot(x, "", colorLightBlue, styleLine|styleThick);
   }
   if(DrawR!="Off")
   {
      x0 = GetXResistance(Resistance1, Percentage, Lines+1);
      x1 = GetXResistance(Resistance2, Percentage, Lines);
      y0 = GetYResistance(Resistance1, Percentage, Lines+1);
      y1 = GetYResistance(Resistance2, Percentage, Lines);
      x = LineArray(x0, y0, x1, y1, 1);
      if(!Method)
         Con = (IsTD_Supply(x0) AND IsTD_Supply(x1));
      if(AllOrDownR) ConR = y0 > y1;
      if(Con AND ConR)
         Plot(x, "", colorRed , styleLine|styleThick);
   }
}

if(ShowTDP)
{
   PlotShapes(TD_Supply()*shapeSmallCircle, colorRed, 0, H, H*.001);
   PlotShapes(TD_Demand()*shapeSmallCircle, colorGreen, 0, L, -L*.001);
}
Title =FullName()+" ({{NAME}})\n{{DATE}}\n"+"Open: "+O+", Hi: "+H+", Lo: "+L+", Close: "+C;

_SECTION_END();

	//|-----------------------------------------------------------------------------------------
	//|PatternExplorer.com - Rainbow Chart
	//|Copyright © 2007, PatternExplorer.com
	//|http://www.PatternExplorer.com
	//|e-mail: support@PatternExplorer.com
	//|-----------------------------------------------------------------------------------------
	FormulaName = "PE - Rainbow Chart";

	SetChartOptions(0,chartShowDates|chartShowArrows|chartLogarithmic|chartWrapTitle);
	#pragma nocache
	#include_once  <\PEInc\PatternExplorer_f0.afl>
	#Include_once "C:\ami4.9\Formulas\PatternExplorer\#Defaults & Mods\PE - Defaults.afl"
	#Include_once "C:\ami4.9\Formulas\PatternExplorer\#Defaults & Mods\PE - Mods.afl"
	/*******************************************************************************************/
	AddCustomCodeBeforePE();
	/*******************************************************************************************/
	AddAlertParam(def_AudioAlert,def_EmailAlert,def_BarComplete);
	/*******************************************************************************************/

/*******************************************************************************************/

/*******************************************************************************************/
	Count = 0;
	for( i = StartAvg; i < LastAvg; i = i + increment )
	{
	/*******************************************************************************************/

/*******************************************************************************************/
		up = Average( Pf, i,AvgType );
		down = Average( Pf, i + increment,AvgType );

	   if(Effect)
	    side = IIf(up<=down AND Ref( up<=down, 1 ), 0.6, 1 );
		a = 0; Count = Count+1;

		if(DisplayType)
		{
		PlotOHLC( up,up,down,down, "Average"+i,ColorHSB(Hue,Saturation,Brightness), styleCloud | styleNoLabel|styleNoTitle );
		}
		else
		{
		Plot( up, "Average"+i,ColorHSB(Hue,Saturation,Brightness), LineStyle | styleNoLabel|styleNoTitle );
		}
	}
	Fastest = Average(Pf, StartAvg,AvgType );
	SlowestPds = StartAVG+(Count-1)*Increment;
	Slowest = Average(Pf,SlowestPds,AvgType );
	/*******************************************************************************************/
	Buy = def_Buy AND Cross(fastest,slowest);
	Sell = def_Sell AND Cross(slowest,fastest);
	/*******************************************************************************************/
	/*
	BodySize = 0.1;
	HeikinAshiDoji = abs((HaClose-HaOpen))<(HaHigh-HaLow)/(1/BodySize);

	Buy = def_Buy AND Close < slowest AND HaClose>HaOpen AND Ref(HeikinAshiDoji,-1);//Heikin ashi doji outside from Rainbow
	Sell = def_Sell AND Close > slowest AND HaClose<HaOpen AND Ref(HeikinAshiDoji,-1);//Heikin ashi doji outside from Rainbow

	//Buy = def_Buy AND (Buy OR Cross(fastest,slowest));//Rainbow signal and HA doji
	//Sell = def_Sell AND (Sell OR Cross(slowest,fastest));//Rainbow signal and HA doji
	*/
	/*******************************************************************************************/
	PlotShapes(Buy*Buyshape*Shapes,Buyshapecolor,0,L,-def_BuyShapeOffset-5);
	PlotShapes(Sell*Sellshape*Shapes,Sellshapecolor,0,H,-def_SellShapeOffset-5);
	/*******************************************************************************************/
	AddAlert(Buy,Audio,Email,"Fastest Average crossed slowest Average",1,BarComplete,def_BuySound1);
	AddAlert(Sell,Audio,Email,"Slowest Average crossed Fastest Average",2,BarComplete,def_SellSound1);
	/*******************************************************************************************/
	Filter = def_Filter AND NOT GroupID()==253;
	Filter = Filter AND (Buy OR Sell);
	/*******************************************************************************************/
	Addefaultcolumns();
	Adddefaultcolumns(2,1);
	AddTextColumn(FullName(),"Full name");
	/*******************************************************************************************/
	ToolTip = def_ToolTip;
	Title = "PatternExplorer.com - Rainbow Chart "+Avgtext;
	/*******************************************************************************************/
	#include_once  <\PEInc\PatternExplorer_1.afl>
	/*******************************************************************************************/
	/*******************************************************************************************/
	AddCustomCodeAfterPE();
	/*******************************************************************************************/
	Title = Title + default_priceTitle+" ";

