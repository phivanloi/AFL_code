// PIBD DIDIFF Strategy
// Developed by James Pujals JUN 2005
// PIBD DIDIFF LE-LX and SE-SX Strategy 2

//========================================
// INPUTS
Periods=10; // number of periods to calculate Directional Movement Indicator
DiffTriggerBuy = 10; // when ((DiDiff - LowestDiff) >= DiffTriggerBuy) then BUY
DiffTriggerSell = 10; // when ((HighestDiff - DIDIFF) >= DiffTrigger) then SELL
TrailingAmountMethod = 0; // 0=disabled,1=TrailingAmountDollar,2=TrailingAmountPercent
TrailingAmountDollar = 1.00; // The dollar amount subtracted from the close on open and the high thereafter to establish the StopLossPrice
TrailingAmountPercent = 5.0; // Percentage of the close on open and the high thereafter to establish the StopLossPrice
CloseOnLastBar = 0; // 0=false, 1=true

//========================================
// VARIABLES
NumBarsSinceLastEntry = 0;  // Number of bars since last trade entry
OpenPosIndex = 0; // Array index of last open position trade
MarketPosition = 0; // 0=Not in Market, 1=Long, -1=Short, 99=Limit Order
TradeProfit = 0; // Current profit for this trade
StopLossPrice = 0; // Stop Loss Price failsafe of when to get out of the trade
TempValue = 0; // Temp variable
FirstBar = -1; // First Bar of Data in DiDiff
SignalBar = 0; // The BarIndex of when a buy or Sell signal occurred
SignalDiff = 0; // Diff value for Signal Bar index
ExitPrice = 0;
ExitPosition = 0;

//========================================
// Using Directional Movement, compute the True Directional Movement which is the difference between DI Plus and DIMinus
DiDiff = PDI(Periods) - MDI(Periods);

//========================================
// INITIALIZATIONS
// set array values to 0
for(i=0;i < BarCount;++i)
{
	BuyStatus[i] = 0; // 0=closed,1=position opened
	SellStatus[i] = 0; // 0=open,1=position closed
	ShortStatus[i] = 0; // 0=closed,1=position opened
	CoverStatus[i] = 0; // 0=open,1=position closed

	LE[i] = 0; // open price
	LX[i] = 0; // close price
	LXType[i] = 0; // 0=not sold, 1=DiffTriggerSell, 2=StopLossPrice, 3=StopLossPriceATR, 9=CloseOnLastBar

	SE[i] = 0; // open price
	SX[i] = 0; // close price
	SXType[i] = 0; // 0=not sold, 1=DiffTriggerSell, 2=StopLossPrice, 3=StopLossPriceATR, 9=CloseOnLastBar

	MaxTradeProfit[i] = 0; // Max Profit achieved for current trade
	PosProfit[i] = 0; // Profit made

	NumTrades[i] = 0; // Number of long and short trades
	TotalProfit[i] = 0; // Total accumulation of profit
	TradesWon[i] = 0; // Number of winning trades
	ProfitWon[i] = 0; // Total profit from winning trades
	TradesLost[i] = 0; // Number of losing trades
	ProfitLost[i] = 0; // Total profit from losing trades
	MaxProfit[i] = 0; // Max Possible Profit achieved for current trade

	if (DiDiff[i] != 0 AND FirstBar == -1)
	{
		FirstBar = i;
	}
}

//========================================
 
for (IndexBar=FirstBar; IndexBar < BarCount;++IndexBar)
{
	if (IndexBar == FirstBar)
	{
		// OPEN INITIAL POSITION
		SignalBar = IndexBar;
		SignalDiff = DiDiff[IndexBar];

		if (DiDiff[IndexBar] > 0)
		{
			// Open LONG position		
			MarketPosition = 1; // 1=Buy to Cover and open Long Position

			BuyStatus[IndexBar] = 1;
			SellStatus[IndexBar] = 0;
			ShortStatus[IndexBar] = 0;
			CoverStatus[IndexBar] = 0;

			LE[IndexBar] = Close[IndexBar];
			LX[IndexBar] = 0;
			LXType[IndexBar] = 0; // 0=not sold

			SE[IndexBar] = 0;
			SX[IndexBar] = 0;
			SXType[IndexBar] = 0; // 0=not sold

			OpenPosIndex = IndexBar;
			NumBarsSinceLastEntry = 0;

			if (TrailingAmountMethod > 0)
			{
				if (TrailingAmountMethod == 1)
					TempValue = (Close[IndexBar] - TrailingAmountDollar);
				else
					TempValue = (Close[IndexBar] * (1.0 - (TrailingAmountPercent/100.0)));

				StopLossPrice = TempValue;
			}
		}
		else
		{
			// Open SHORT position		
			MarketPosition = -1; // -1=Sell Long and open Short Position

			BuyStatus[IndexBar] = 0;
			SellStatus[IndexBar] = 0;
			ShortStatus[IndexBar] = 1;
			CoverStatus[IndexBar] = 0;

			LE[IndexBar] = 0;
			LX[IndexBar] = 0;
			LXType[IndexBar] = 0; // 0=not sold

			SE[IndexBar] = Close[IndexBar];
			SX[IndexBar] = 0;
			SXType[IndexBar] = 0; // 0=not sold

			OpenPosIndex = IndexBar;
			NumBarsSinceLastEntry = 0;

			if (TrailingAmountMethod > 0)
			{
				if (TrailingAmountMethod == 1)
					TempValue = (Close[IndexBar] + TrailingAmountDollar);
				else
					TempValue = (Close[IndexBar] * (1.0 + (TrailingAmountPercent/100.0)));

				StopLossPrice = TempValue;
			}
		}
	}
	else
	{
		++NumBarsSinceLastEntry;
		NumTrades[IndexBar] = NumTrades[IndexBar-1];
		TotalProfit[IndexBar] = TotalProfit[IndexBar-1];
		TradesWon[IndexBar] = TradesWon[IndexBar-1];
		ProfitWon[IndexBar] = ProfitWon[IndexBar-1];
		TradesLost[IndexBar] = TradesLost[IndexBar-1];
		ProfitLost[IndexBar] = ProfitLost[IndexBar-1];
		MaxProfit[IndexBar] = MaxProfit[IndexBar-1];

		if (MarketPosition == 1) // 1=Long
		{
			// a LONG Market Position is open so determine if position is to be closed

			// calculate current open position TradeProfit
			TradeProfit = High[IndexBar] - LE[OpenPosIndex];

			// recalculate MaxTradeProfit
			if (MaxTradeProfit[IndexBar] < TradeProfit) MaxTradeProfit[IndexBar] = TradeProfit;

			if (SignalDiff < DiDiff[IndexBar]) 
			{
				SignalBar = IndexBar;
				SignalDiff = DiDiff[IndexBar];
			}

			ExitPrice = Close[IndexBar];
			ExitPosition = 0;

			// check Long StopLoss - if LowPrice <= StopLossPrice then sell position
			if (TrailingAmountMethod > 0 AND MarketPosition > 0)
			{
				if (Low[IndexBar] <= StopLossPrice)
				{
					// check for gap down
					if (High[IndexBar] < StopLossPrice) StopLossPrice = Open[IndexBar];

					ExitPrice = StopLossPrice;
					ExitPosition = 2; // 2=StopLossPrice
				}
			}

			if (((DiDiff[SignalBar] - DiDiff[IndexBar]) > DiffTriggerSell) OR ExitPosition > 0)
			{
				SignalBar = IndexBar;
				SignalDiff = DiDiff[IndexBar];

				// Sell LONG position and open SHORT position
				MarketPosition = -1; // -1=Sell Long and open Short Position

				BuyStatus[IndexBar] = 0;
				SellStatus[IndexBar] = 1;
				ShortStatus[IndexBar] = 1;
				CoverStatus[IndexBar] = 0;

				LE[IndexBar] = 0;
				LX[IndexBar] = ExitPrice;
				if (ExitPosition == 0) ExitPosition = 1; // 1=DiffTriggerSell
				LXType[IndexBar] = ExitPosition; // 1=DiffTriggerSell

				SE[IndexBar] = ExitPrice;
				SX[IndexBar] = 0;
				SXType[IndexBar] = 0; // 0=not sold

				// calculate trade stats
				NumTrades[IndexBar] = NumTrades[IndexBar-1] + 1;
				PosProfit[IndexBar] = LX[IndexBar] - LE[OpenPosIndex];
				TotalProfit[IndexBar] = TotalProfit[IndexBar-1] + PosProfit[IndexBar];
				MaxProfit[IndexBar] = MaxProfit[IndexBar-1] + MaxTradeProfit[IndexBar];
				if (PosProfit[IndexBar] > 0)
				{
					TradesWon[IndexBar] = TradesWon[IndexBar-1] + 1;
					ProfitWon[IndexBar] = ProfitWon[IndexBar-1] + PosProfit[IndexBar];
				}
				else
				{
					TradesLost[IndexBar] = TradesLost[IndexBar-1] + 1;
					ProfitLost[IndexBar] = ProfitLost[IndexBar-1] + PosProfit[IndexBar];
				}

				OpenPosIndex = IndexBar;
				NumBarsSinceLastEntry = 0;

				if (TrailingAmountMethod > 0)
				{
					if (TrailingAmountMethod == 1)
						TempValue = (Close[IndexBar] + TrailingAmountDollar);
					else
						TempValue = (Close[IndexBar] * (1.0 + (TrailingAmountPercent/100.0)));

					StopLossPrice = TempValue;
				}
			}
			else
			{
				if (TrailingAmountMethod > 0)
				{
					// if still in the market then recalculate StopLossPrice
					if (TrailingAmountMethod == 1)
						TempValue = (High[IndexBar] - TrailingAmountDollar);
					else
						TempValue = (High[IndexBar] * (1.0 - (TrailingAmountPercent/100.0)));

					if (TempValue > StopLossPrice)
						StopLossPrice = TempValue;
				}
			}
		}
		else
		{
			// MarketPosition = -1 // Short
			// a SHORT Market Position is open so determine if position is to be closed

			// calculate current open position TradeProfit
			TradeProfit = SE[OpenPosIndex] - Low[IndexBar];

			// recalculate MaxTradeProfit
			if (MaxTradeProfit[IndexBar] < TradeProfit) MaxTradeProfit[IndexBar] = TradeProfit;

			if (SignalDiff > DiDiff[IndexBar])
			{
				SignalBar = IndexBar;
				SignalDiff = DiDiff[IndexBar];
			}

			ExitPrice = Close[IndexBar];
			ExitPosition = 0;

			// check StopLoss - if LowPrice <= StopLossPrice then sell position
			if (TrailingAmountMethod > 0 AND MarketPosition > 0)
			{
				if (High[IndexBar] >= StopLossPrice)
				{
					// check for gap up
					if (Low[IndexBar] > StopLossPrice) StopLossPrice = Open[IndexBar];

					ExitPrice = StopLossPrice;
					ExitPosition = 2; // 2=StopLossPrice
				}
			}

			if (((DiDiff[IndexBar] - DiDiff[SignalBar]) > DiffTriggerBuy) OR ExitPosition > 0)
			{
				SignalBar = IndexBar;
				SignalDiff = DiDiff[IndexBar];

				MarketPosition = 1; // 1=Buy to Cover and open Long Position

				BuyStatus[IndexBar] = 1;
				SellStatus[IndexBar] = 0;
				ShortStatus[IndexBar] = 0;
				CoverStatus[IndexBar] = 1;

				LE[IndexBar] = Close[IndexBar];
				LX[IndexBar] = 0;
				LXType[IndexBar] = 0; // 0=not sold

				SE[IndexBar] = 0;
				SX[IndexBar] = Close[IndexBar];
				if (ExitPosition == 0) ExitPosition = 1; // 1=DiffTriggerSell
				SXType[IndexBar] = ExitPosition; // 1=DiffTriggerSell

				// calculate trade stats
				PosProfit[IndexBar] = SE[OpenPosIndex] - SX[IndexBar];
				NumTrades[IndexBar] = NumTrades[IndexBar-1] + 1;
				TotalProfit[IndexBar] = TotalProfit[IndexBar-1] + PosProfit[IndexBar];
				MaxProfit[IndexBar] = MaxProfit[IndexBar-1] + MaxTradeProfit[IndexBar];
				if (PosProfit[IndexBar] > 0)
				{
					TradesWon[IndexBar] = TradesWon[IndexBar-1] + 1;
					ProfitWon[IndexBar] = ProfitWon[IndexBar-1] + PosProfit[IndexBar];
				}
				else
				{
					TradesLost[IndexBar] = TradesLost[IndexBar-1] + 1;
					ProfitLost[IndexBar] = ProfitLost[IndexBar-1] + PosProfit[IndexBar];
				}

				OpenPosIndex = IndexBar;
				NumBarsSinceLastEntry = 0;

				if (TrailingAmountMethod > 0)
				{
					if (TrailingAmountMethod == 1)
						TempValue = (Close[IndexBar] - TrailingAmountDollar);
					else
						TempValue = (Close[IndexBar] * (1.0 - (TrailingAmountPercent/100.0)));
	
					StopLossPrice = TempValue;
				}
			}
			else
			{	
				if (TrailingAmountMethod > 0)
				{
					// if still in the market then recalculate StopLossPrice
					if (TrailingAmountMethod == 1)
						TempValue = (Low[IndexBar] + TrailingAmountDollar);
					else
						TempValue = (Low[IndexBar] * (1.0 + (TrailingAmountPercent/100.0)));

					if (TempValue > StopLossPrice)
						StopLossPrice = TempValue;
				}
			}
		}
	}		

 	//_TRACE("IndexBar="+NumToStr(IndexBar)+" SignalBar="+NumToStr(SignalBar)+" SignalDiff="+NumToStr(SignalDiff)+" MarketPosition="+NumToStr(MarketPosition) + " DiDiff[IndexBar]="+NumToStr(DiDiff[IndexBar]) );
}

//========================================
// check CLOSE ON LAST BAR
//_TRACE("CloseOnLastBar="+NumToStr(CloseOnLastBar)+" NumBarsSinceLastEntry="+NumToStr(NumBarsSinceLastEntry)+" MarketPosition="+NumToStr(MarketPosition)+" IndexBar="+NumToStr(IndexBar) + " BarCount="+NumToStr(BarCount) );
//if ((CloseOnLastBar == 1) AND (IndexBar == (BarCount-1)) AND (MarketPosition != 0))
//if ((CloseOnLastBar == 1) AND (NumBarsSinceLastEntry > 0) AND (MarketPosition != 0))
if ((CloseOnLastBar == 1) AND (NumBarsSinceLastEntry > 0))
{
	IndexBar = (BarCount-1);
	if (MarketPosition == 1) // 1=Long
	{
		// a LONG Market Position is open so determine if position is to be closed

		// calculate current open position TradeProfit
		TradeProfit = High[IndexBar] - LE[OpenPosIndex];

		// recalculate MaxTradeProfit
		if (MaxTradeProfit[IndexBar] < TradeProfit) MaxTradeProfit[IndexBar] = TradeProfit;

		// Sell LONG position
		MarketPosition = 0; // 0=Not in Market

		BuyStatus[IndexBar] = 0;
		SellStatus[IndexBar] = 1;
		ShortStatus[IndexBar] = 0;
		CoverStatus[IndexBar] = 0;

		LE[IndexBar] = 0;
		LX[IndexBar] = Close[IndexBar];
		LXType[IndexBar] = 9; // 9=CloseOnLastBar

		SE[IndexBar] = 0;
		SX[IndexBar] = 0;
		SXType[IndexBar] = 0; // 0=not sold

		// calculate trade stats
		PosProfit[IndexBar] = LX[IndexBar] - LE[OpenPosIndex];
		NumTrades[IndexBar] = NumTrades[IndexBar-1] + 1;
		TotalProfit[IndexBar] = TotalProfit[IndexBar-1] + PosProfit[IndexBar];
		MaxProfit[IndexBar] = MaxProfit[IndexBar-1] + MaxTradeProfit[IndexBar];
		if (PosProfit[IndexBar] > 0)
		{
			TradesWon[IndexBar] = TradesWon[IndexBar-1] + 1;
			ProfitWon[IndexBar] = ProfitWon[IndexBar-1] + PosProfit[IndexBar];
		}
		else
		{
			TradesLost[IndexBar] = TradesLost[IndexBar-1] + 1;
			ProfitLost[IndexBar] = ProfitLost[IndexBar-1] + PosProfit[IndexBar];
		}
	}
	else
	{
		// MarketPosition = -1 // Short
		// a SHORT Market Position is open so determine if position is to be closed

		// calculate current open position TradeProfit
		TradeProfit = SE[OpenPosIndex] - Low[IndexBar];

		// recalculate MaxTradeProfit
		if (MaxTradeProfit[IndexBar] < TradeProfit) MaxTradeProfit[IndexBar] = TradeProfit;

		// Buy To Cover SHORT Position
		MarketPosition = 0; // 0=Not in Market

		BuyStatus[IndexBar] = 0;
		SellStatus[IndexBar] = 0;
		ShortStatus[IndexBar] = 0;
		CoverStatus[IndexBar] = 1;

		LE[IndexBar] = 0;
		LX[IndexBar] = 0;
		LXType[IndexBar] = 0; // 0=not sold

		SE[IndexBar] = 0;
		SX[IndexBar] = Close[IndexBar];
		SXType[IndexBar] = 9; // 9=CloseOnLastBar

		// calculate trade stats
		PosProfit[IndexBar] = SE[OpenPosIndex] - SX[IndexBar];
		NumTrades[IndexBar] = NumTrades[IndexBar-1] + 1;
		TotalProfit[IndexBar] = TotalProfit[IndexBar-1] + PosProfit[IndexBar];
		MaxProfit[IndexBar] = MaxProfit[IndexBar-1] + MaxTradeProfit[IndexBar];
		if (PosProfit[IndexBar] > 0)
		{
			TradesWon[IndexBar] = TradesWon[IndexBar-1] + 1;
			ProfitWon[IndexBar] = ProfitWon[IndexBar-1] + PosProfit[IndexBar];
		}
		else
		{
			TradesLost[IndexBar] = TradesLost[IndexBar-1] + 1;
			ProfitLost[IndexBar] = ProfitLost[IndexBar-1] + PosProfit[IndexBar];
		}
	}
}

//========================================
// setup Scan and Explorer conditions
Buy=BuyStatus;
Sell=SellStatus;
Short=ShortStatus;
Cover=CoverStatus;
Filter=Buy OR Sell OR Short OR Cover; 

//========================================
// Displayed in Explorer Results
AddColumn(Buy,"BUY");
AddColumn(Sell,"SELL");
AddColumn(LE,"LE");
AddColumn(LX,"LX");
AddColumn(LXType,"LXType");
AddColumn(SE,"SE");
AddColumn(SX,"SX");
AddColumn(SXType,"SXType");
AddColumn(PosProfit,"PosProfit");
AddColumn(MaxTradeProfit,"MaxTradeProfit");
AddColumn(NumTrades,"NumTrades");
AddColumn(TradesWon,"TradesWon");
AddColumn(TradesLost,"TradesLost");
AddColumn(TotalProfit,"TotalProfit"); 
AddColumn(ProfitWon,"ProfitWon");
AddColumn(ProfitLost,"ProfitLost");
AddColumn(MaxProfit,"MaxProfit");