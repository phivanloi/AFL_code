SetChartBkGradientFill( ColorRGB(0,0,0), ColorRGB(0,0,0)); 
PI = 3.1415926; 

Data = (H+L)/2; 

// detrending ( high-pass filter ) 
HFPeriods = Param("HP filter cutoff", 30, 20, 100 ); 
alpha1 = ( 1-sin(2*pi/HFPeriods) ) / cos( 2 * pi / HFPeriods ); 
HP = AMA2( Data - Ref( Data, -1 ), 0.5 * ( 1 + alpha1 ), alpha1 ); 

// 6-tap low-pass FIR filter 
SmoothHP  = ( HP + 2 * Ref( HP, -1 ) + 3 * Ref( HP, -2 ) + 
   3 * Ref( HP, -3 ) + 2 * Ref( HP, -4 ) + Ref( HP, -5 ) )/12; 

SmoothHPDiff = SmoothHP - Ref( SmoothHP, -1 ); 

x = BarIndex(); 

delta = -0.015 * x + 0.5; 
delta = Max( delta, 0.15 ); 

Q  = 0; 
Real = 0; 
Imag = 0; 
Ampl = 0; 
DB =  0; 

I = SmoothHP; 

MaxAmpl = 0; 

MinPeriod = 6; 
MaxPeriod = 30; 
PeriodStep = 0.5; 

for( N = MinPeriod; N <= MaxPeriod; N += PeriodStep ) 
{ 
   beta = cos( 2 * PI / N ); 
   Q = ( N / ( 2 * PI ) ) * SmoothHPDiff; 

   for( bar = 12; bar < BarCount; bar++ ) 
   { 
     gamma = 1 / cos( 4 * PI * delta[ bar ] / N ); 
     alpha = gamma - sqrt( gamma * gamma - 1 ); 
     
     Real[ bar ] = 0.5 * ( 1 - alpha ) * ( I[ bar ] - I[ bar - 1 ] ) + 
                   beta * ( 1 + alpha ) * Real[ bar - 1 ] - 
                   alpha * Real[ bar - 2 ]; 

     Imag[ bar ] = 0.5 * ( 1- alpha ) * ( Q[ bar ] - Q[ bar - 1 ] ) + 
                 beta * ( 1 + alpha ) * Imag[ bar - 1 ] - 
                 alpha * Imag[ bar - 2 ]; 
   } 

   Ampl = Real * Real + Imag * Imag; 
   MaxAmpl = Max( MaxAmpl, Ampl ); 
   VarSet("Ampl"+N, Ampl ); 
} 

CoronaSwingPos = ParamToggle("Chart Type", "Spectrum|Corona Swing Pos" ); 

// Plot Heat Map ( Spectrogram ) 
// and find dominant cycle 
DcNum = DcDenom = 0; 
for( N = MinPeriod; N <= MaxPeriod; N += PeriodStep ) 
{ 
   Ampl = VarGet("Ampl"+N); 

   db  = Nz( -10 * log10( 0.01 / ( 1 - 0.99 * Ampl / MaxAmpl ) ) ); 
   db = Min( db, 20 ) ; 

   Red = IIf( db <= 10, 255, 255 * ( 2 - db/10 ) ); 
   Green = IIf( db <= 10, 255 * ( 1 - db/10 ), 0 ); 

   if( NOT CoronaSwingPos ) 
      PlotOHLC( N, N, N-PeriodStep, N-PeriodStep, "", 
       ColorRGB( Red, Green, 0 ), styleCloud | styleNoLabel); 

   DcNum = DcNum + (db <= 6 ) * N * ( 20 - db ); 
   DcDenom = DcDenom + ( db <= 6 ) * ( 20 - db ); 
}     

DC = DcNum / DcDenom; 

if( NOT CoronaSwingPos ) 
{ 
  DomCycle = Median( DC, 5 ); 

  Plot( DomCycle, "Dominant Cycle", colorYellow); 
  Title = EncodeColor( colorWhite ) + "{{NAME}} - Spectrum - DC " + DomCycle; 
} 

if( CoronaSwingPos ) 
{ 
   DomCycle = Median( DC, 5 ); 
   DomCycle = Max( DomCycle, 6 ); 
   BP2 = 0; 
   DataDiff = Data - Ref( Data, -2 ); 

   for( bar = 10; bar < BarCount; bar++ ) 
   { 
     beta = cos( 2 * PI / domCycle[ bar ] ); 
     gamma = 1 / cos( 4 * PI * delta[ bar ] / DomCycle[ bar ] ); 
     alpha = gamma - sqrt( gamma ^ 2 - 1 ); 

     BP2[ bar ] = 0.5 * ( 1 - alpha ) * DataDiff[ bar ] +   
           beta * ( 1 + alpha ) * BP2[ bar - 1 ] - 
           alpha * BP2[ bar - 2 ]; 
   } 

   Q2 = ( domCycle / ( 2 * PI ) ) * ( BP2 - Ref( BP2, -1 ) ); 
   Lead60 = 0.5 * BP2 + 0.866 * Q2; 

   HL = HHV( Lead60, 50 ); 
   LL = LLV( Lead60, 50 ); 

   Psn = ( Lead60 - LL )/( HL - LL ); 

   HL = HHV( Psn, 20 ); 
   LL = LLV( Psn, 20 ); 

   Width = IIf( HL - LL > 0.85, 0.85, ( HL - LL ) ); 

  for( N = 0; N < 50; N++ ) 
  { 
     Raster =  log( Width/( 0.2 + abs( Psn - N/50 ) ) );   

     Raster = Min( 2, Max( 0, Raster ) ); 
     CR =  128*Raster;//IIf( Raster <= 10,  Raster, 255 -  Raster ); 
     y = 0.02 * N; 
     PlotOHLC( y, y+0.01, y -0.01, y-0.01, "", ColorRGB( 0, CR, CR ), 
      styleCloud | styleNoLabel ); 
  } 
  Plot( Psn, "", ColorRGB( 0, 255, 255 )); 
  Title = EncodeColor( colorWhite ) + "{{NAME}} - Corona Swing Position " + Psn; 
} 

GraphZOrder = 1;