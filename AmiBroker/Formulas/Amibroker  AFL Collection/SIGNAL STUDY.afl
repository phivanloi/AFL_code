/*								SIGNAL STUDY.afl - Bill Barnard, 2/9/06
		Read discussion on-screen (click top parameter button) or further down in this script
*/

//	if the line #include <Multiple Signals.afl> (about 1/4 down in formula) and the 
//	following line are commented out, the formula will run with at least Version 4.72.1
Version(4.76);		//	requires at least this version of Amibroker

#include <util1x.afl>				//	Bill Barnard's code

#include <ft-utilities7a.afl>		//	Bruce Robinson's code, mods by Bill Barnard

SetChartOptions(0, chartShowDates, 0);

fmkdir( "ConfigFiles" );	//	make this directory to hold config info, if it doesn't exist.

//	determine location of the FT drive so we can use FT FNUs and signals
ErrText		= "";
Continue 		= FindFTDrive() ;
if (ErrText !="") Title = ErrText;
if (Continue )	//	Continue with program, now that we know the location of FTDrive or that it is not present
{		//	the close of this bracket is the last line

FTDrive	= StaticVarGetText("FastTrackDrive") ;	//	"none";//


//	the following text provides notes or instructions upon click of ParamTrigger

//	initialize
showInstruct1 = showInstruct2 = showInstruct3 = showInstruct4 = showInstruct5 = 0;

instruct1	= EncodeColor(-1)+
//	vvvvvvvvvvvvvvvvvvvvv  start page 1 instructions  (in quotes, '+' at end)  vvvvvvvvvvvvvvvvvvvvvvvv

"\n\n                                         SIGNAL STUDY.afl - Bill Barnard, 2/9/06"+nl(3)+

"( ALL OF THE DISCUSSION PAGES CAN ALSO BE READ IN THE TOP PART OF THE FORMULA )"+nl(3)+

"INTRODUCTION"+nl(1)+
"This code plots the result of trading a selected fund against its inverse or a short fund or a money"+nl(1)+
"market typed into a parameter box. The signal trading can be selected to be long only, short only, "+nl(1)+
"or long / short. The code uses many adjustable parameters and many of the new functions in "+nl(1)+
"Amibroker. You should use Version 4.76 or newer, or many of the functions will not be compatible. "+nl(1)+
"Start by right-clicking the chart and selecting 'Parameters'. Then click the 'Reset all' button at the "+nl(1)+
"bottom of the parameter window. This will display all the parameters in the correct order, and will "+nl(1)+
"make this explanation easier to follow. All necessary adjustments can be made from the parameter "+nl(1)+
"window; it is not necessary make any settings in the AA window. The code references two other afl "+nl(1)+
"scripts, util1x.afl and ft-utilities7a.afl, which must be present in the your Standard Include Path. "+nl(1)+
"The code is designed to be used with daily data, and is inaccurate for other intervals."+nl(3)+

"SIGNALS"+nl(1)+
"Trading is done according to the signals generated by the code in the section labeled 'Enter below the "+nl(1)+
"Buy and Sell rules...' The formula is designed to make it easy to use different Buy/Sell systems and "+nl(1)+
"see the trading results. If your Buy/Sell rules are used, rather than the provided include files, minimal "+nl(1)+
"changes in the code may be required (probably in the plotting section) to produce the proper plots."+nl(2)+

"The indicator generating the signals is plotted in the bottom part of the chart, and the signals are"+nl(1)+
"are marked at the bottom of the window and as ticks on the Buy-and-Hold plot. For comparison or"+nl(1)+
"reference, the sell periods of an ideal (zig-zag) signal or a chosen existing signal can be underlayed"+nl(1)+
"on the indicator section of the chart. "+nl(3)+


"                                         Click the parameter button to show Page 2";

//	^^^^^^^^^^^^^^^^^^^^ end page 1 instructions  ^^^^^^^^^^^^^^^^^^^^^^^^^^^


instruct2	= EncodeColor(-1)+
//	vvvvvvvvvvvvvvvvvvvvv start page 2 instructions  (in quotes, ';' at end)  vvvvvvvvvvvvvvvvvvvvvvvv

 "\n\n                                                                  Page 2"+nl(3)+

 "SIGNALS (cont'd..)"+nl(1)+
"Changing the parameters which produce the indicator will enable visual optimization of the"+nl(1)+
"signal and an estimate of the sensitivity to parameter change."+nl(2)+

 "When the vertical pole is placed on a day of signal change, date and status are shown."+nl(3)+

 "PERIOD OF THE TEST"+nl(1)+
 "The range for the test can be set by typing a start date into the top parameter box in the 'PERIOD "+nl(1)+
 "OF TEST' section and then clicking on the marked parameter bar just below it. Another way to set"+nl(1)+
 "the test start is to place the white pole at the desired location and click the marked parameter bar"+nl(1)+
 "(third from  the top). By default, the end of the test range is the last day, but this can be changed"+nl(1)+
 "by placing the white pole at the desired point and clicking the marked parameter bar (fourth from"+nl(1)+
 "the top)."+nl(3)+

 "TRADING DELAY AND MINIMUM HOLDING PERIOD"+nl(1)+
 "Trading delay and a minimum holding period for either buys or all trades can be adjusted via the "+nl(1)+
 "marked parameters. "+nl(3)+

 "PARAMETER ENTRY"+nl(1)+
 "The first time the code is used on a chart sheet, the symbols for your desired short fund and money"+nl(1)+
 "market fund should be typed into the marked parameter boxes (replacing the ones there by default). "+nl(1)+
 "These should be entered at the end of the phrases, 'Short Fund---' and 'MM Fund---'. If the entry for "+nl(1)+
 "the short fund is left blank, an inverse of the current symbol will be created for long and short trading, "+nl(1)+
 "and if the money market symbol is blank, long or short trading will be against a 0% money market. "+nl(1)+
 "These and all of the other parameters are saved in files in the directory, Amibroker\\ConfigFiles, and"+nl(1)+
 "may be changed as desired. The configuration files will preserve your parameter settings when the"+nl(1)+
 "'Reset all' button is clicked. "+nl(3)+

 "                                           Click the parameter button to show Page 3";

//	^^^^^^^^^^^^^^^^^^^^ end page 2 instructions  ^^^^^^^^^^^^^^^^^^^^^^^^^^^


instruct3	= EncodeColor(-1)+
//	vvvvvvvvvvvvvvvvvvvvvv  start page 3 instructions  (in quotes, ';' at end)  vvvvvvvvvvvvvvvvvvvvvvvv

"\n\n                                                                  Page 3"+nl(3)+
"PLOT SCALING"+nl(1)+
"When viewing variable signals applied to a trading pair, it is usually desirable to have all the"+nl(1)+
"plots drawn to the same scale so the results can be visually compared for magnitude. A plot"+nl(1)+
"maximum shown with a dashed line can be adjusted (by slider) to be slightly larger than the best"+nl(1)+
"result, causing all the plots to be drawn to the same scale for easy comparison. To make all plots"+nl(1)+
"fill the window, as FastTrack does, set this parameter to 0."+nl(3)+

"DRAWDOWN OR TRADE GAIN OR LOSS"+nl(1)+
"Below the trading gain plot is a plot of the gain or loss per trade, the drawdown during a trade, or "+nl(1)+
"the drawdown over the total period. These are selectable via a parameter. A plot minimum shown "+nl(1)+
"by a dashed line can be used with the drawdown plot in a way similar to that of the plot maximum "+nl(1)+
"for the trading result."+nl(3)+

"OTHER CHART APPEARANCE CHOICES"+nl(1)+
"There are parameters to select logarithmic or linear plots, whether or not to show the buy and hold "+nl(1)+
"plot, and full or abbreviated performance statistics. The last of the statistics, called 'RRR', I define "+nl(1)+
"as (CAR ^ 2) / MDD. The Risk Free parameter is used in the calculations of UPI and Sharpe ratio."+nl(2)+

"The sell periods of a comparison signal can be displayed in the lower part of the chart for reference. "+nl(1)+
"The signal can be either an ideal ZigZag of a chosen symbol, or a named signal from Fastrrack or the "+nl(1)+
"AmiBroker database."+nl(3)+

"EXPORTING FILES"+nl(1)+
"The signals studied can be exported as FastTrack signal files or as FNU-type files to FastTrack or "+nl(1)+
"to AmiBroker\\ABFNUs\\. When the parameter buttons to do this are clicked, complete information"+nl(1)+
"about the exports will be shown in the chart window. If you do not use FastTrack, instuctions are "+nl(1)+
"provided to create an ad hoc FT\\ directory, if desired. When signal state files are exported to "+nl(1)+
"AmiBroker\\ABFNUs\\, there is a choice to write 'raw' (unresolved) or 'Flipped' signal states. "+nl(3)+

"                                            Click the parameter button to show Page 4";

//	^^^^^^^^^^^^^^^^^^^^ end page 3 instructions  ^^^^^^^^^^^^^^^^^^^^^^^^^^^


instruct4	= EncodeColor(-1)+
//	vvvvvvvvvvvvvvvvvvvvvv  start page 4 instructions  (in quotes, ';' at end)  vvvvvvvvvvvvvvvvvvvvvvvv

"\n\n                                                                  Page 4"+nl(3)+

"COLORS"+nl(1)+
"Default colors are chosen to display the information best when the background color is black. if you  "+nl(1)+
"use a different background color, click on the appropriate parameter choice in the 'COLOR SCHEME'"+nl(1)+
"section and then follow the on-screen instructions. If you wish to change the colors of any of the "+nl(1)+
"plots from the defaults I have selected for each color scheme, there are a number of individual"+nl(1)+
"color parameter choices. As with all the other parameters, your modifications are saved in a config"+nl(1)+
"file so they won't be lost if you click 'Reset all'."+nl(3)+

"TITLE SPACING AND PLOT SIZING"+nl(1)+
"Information statements are placed throughout the window for clarity. The default parameter values"+nl(1)+
"for spacing and plot sizing are designed to be used with AmiBroker in a full-screen at a resolution"+nl(1)+
"of 1024 x 768, one tool bar above the chart and the chart occupying a full pane. When the chart is a "+nl(1)+
"different size, the parameters near the bottom of the Parameter window can be adjusted to produce "+nl(1)+
"proper plots. The sliders in the 'Title Spacing' and the 'Plot Sizing' sections should be adjusted as "+nl(1)+
"descibed below. "+nl(2)+

"To set up the proper spacing, select an indicator, such as 'Filtered Moving Average' as the source of "+nl(1)+
"the signals, and select the 'Loss Type' of 'Showing Total DrawDown...'. Adjust the 'DrawDown Title "+nl(1)+
"Spacing Lines' parameter until the words, 'Total DrawDown...' are at about 45% of the window height."+nl(1)+
"Then adjust the 'Indicator Title Spacing Lines' parameter until the first line of the title describing the "+nl(1)+
"indicator is at about 30% of the window height. Now set the vertical pole on the day of a Buy signal "+nl(1)+
"(red arrows at bottom of window), and adjust the 'Signal Statement Spacing Lines' parameter until the"+nl(1)+
"title, 'Buy 8/31/2005' (for example) is just above the tops of the signal arrows"+nl(3)+

"                                                Click the parameter button to show Page 5";

//	^^^^^^^^^^^^^^^^^^^^ end page 4 instructions  ^^^^^^^^^^^^^^^^^^^^^^^^^^^


instruct5	= EncodeColor(-1)+
//	vvvvvvvvvvvvvvvvvvvvvv  start page 5 instructions  (in quotes, ';' at end)  vvvvvvvvvvvvvvvvvvvvvvvv

"\n\n                                                                  Page 5"+nl(3)+

"TITLE SPACING AND PLOT SIZING (cont'd..)"+nl(1)+
"Next adjust the Trading Plot Upper and Lower Frespace % parameters to make the plot fit between "+nl(1)+
"the fourth line of the title and the DrawDown title. Then set the DrawDown Plot Upper and Lower  "+nl(1)+
"Freespace % parameters so the drawdown plot fits between its title and the indicator title line."+nl(1)+
"Next, adjust the Indicator Plot Upper and Lower Freespace % to make the indicator fit between."+nl(1)+
"its title lines and the signal statement line."+nl(2)+

"Now change the 'Loss Type Plotted' to 'Showing Trade Gain or Loss...' and adjust the 'Trade Gain or "+nl(1)+
"Loss Title Spacing Lines' parameter to place the words, 'Trade Gain or Loss...' about 8 millimeters "+nl(1)+
"above the indicator title lines. Then adjust the Trade Gain or Loss Upper and Lower Freespace % to"+nl(1)+
"make the plot fit between the trading result plot and the indicator title. Normally you won't have to"+nl(1)+
"adjust the 'Signal Arrow Spacing from Bottom'."+nl(3)+

"CHANGING THE DEFAULTS"+nl(1)+
"When you get your chart set up to fit your requirements for size, etc., you may want to edit the formula"+nl(1)+
"to change the default values. This will make it easier if you want to apply the formula to another sheet,"+nl(1)+
"and is facilitated by clicking the parameter to 'Make a Parameter Check File'. This will write a file called "+nl(1)+
"'ParamCheckXXXX.bf' in AmiBroker\\ConfigFiles (XXXX represents the chart number). Open this with "+nl(1)+
"Notepad, and you will have a parameter list in the order of the 'StrExtract' statements near the top of the "+nl(1)+
"formula. Copy the values to the appropriate places in the 'StrExtract' statements. (Make a backup first.) "+nl(2)+

"If you ever want to return all the parameters to their default values, click the last parameter button "+nl(1)+
"to delete the configuration file and then click 'Reset all'."+nl(3)+


"                                                        Click to return to the Plots";

//	^^^^^^^^^^^^^^^^^^^^ end page 5 instructions  ^^^^^^^^^^^^^^^^^^^^^^^^^^^


//	retrieve stored param information
SB				= 1;
SBFileName	= "ConfigFiles\\showButtons"+GetChartID()+".bf";

fh 						= fopen( SBFileName, "r");
if( fh )
{
   	while( ! feof( fh ) )
   	{
      	SB = StrToNum(fgets( fh ) );
   	}
	fclose( fh );
}

_SECTION_BEGIN("DISCUSSION");
showButtons	= ParamToggle("Show Discussion Parameter Buttons?", "To Show Discussion - Click here then 'Reset all',"+
											"To Hide Discussion - Click here then 'Reset all'", SB);
//	make config file to store choice
fh 	= fopen( SBFileName, "w");
if( fh )
{
   	fputs(NumToStr(showButtons), fh);
	fclose( fh );
}

if (showButtons)	{

showInstruct1	= ParamTrigger("Show Code Discussion, page 1", "Click to Show SIGNAL STUDY Discussion, page 1");
showInstruct2	= ParamTrigger("Show Code Discussion, page 2", "Click to Show SIGNAL STUDY Discussion, page 2");
showInstruct3	= ParamTrigger("Show Code Discussion, page 3", "Click to Show SIGNAL STUDY Discussion, page 3");
showInstruct4	= ParamTrigger("Show Code Discussion, page 4", "Click to Show SIGNAL STUDY Discussion, page 4");
showInstruct5	= ParamTrigger("Show Code Discussion, page 5", "Click to Show SIGNAL STUDY Discussion, page 5");
}
_SECTION_END();

if 		(showInstruct1)	Title = instruct1;
else if (showInstruct2)	Title = instruct2;
else if (showInstruct3)	Title = instruct3;
else if (showInstruct4)	Title = instruct4;
else if (showInstruct5)	Title = instruct5;

else
{
//	vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv  start code  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//	assign values of oft-used functions to arrays
BIn			= BarIndex();
DNum			= DateNum();

//	retrieve stored param information
ParamsList			= "";
ParamsFileName	= "ConfigFiles\\Params"+GetChartID()+".bf";
ParamsCheckFile	= "ConfigFiles\\ParamCheck"+GetChartID()+".bf";

fh 						= fopen( ParamsFileName, "r");
if( fh )
{
   	while( ! feof( fh ) )
   	{
      	ParamsList = fgets( fh );
   	}
	fclose( fh );
}

p0		=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,    0)), 	5	 		);//	sigsel
p1		= WriteIf(ParamsList !="",  				  StrExtract(ParamsList,     1 ), 	"9/1/88");//	dayt
p2		=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,    2)), 	1	 		);//	delay
p3		=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,    3)), 	1	 		);//	unused
p4		=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,    4)), 	0	 		);//	tradeMin
p5		=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,    5)), 	1	 		);//	MinDays
p6		= WriteIf(ParamsList !="", 				  StrExtract(ParamsList,     6 ),	"UCPIX"	);//	ShFund
p7		=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,    7)), 	0	 		);//	tradetype
p8		= WriteIf(ParamsList !="",  				  StrExtract(ParamsList,     8 ),	"FDRXX"	);//	MMFund
p9		=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,    9)), 	30	 		);//	MaxPrice
p10	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  10)), 	2	 		);//	LossTyp
p11	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  11)), 20	 		);//	DDMax
p12	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  12)), 	1	 		);//	logPlot
p13	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  13)), 	1	 		);// 	unused
p14	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  14)), 	1	 		);// 	showBH
p15	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  15)),  1	 		);//	showStats
p16	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  16)), 	0	 		);//	showPoleGn
p17	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  17)), 	3	 		);// 	riskfree
p18	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  18)), 	1	 		);//	showSell
p19	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  19)), 	1	 		);//	useIdeal
p20	= WriteIf(ParamsList !="",  				  StrExtract(ParamsList,  	20	), 	"RUTTR"	);//	refSig
p21	= WriteIf(ParamsList !="", 				  StrExtract(ParamsList,   21	), 	"RUT-I"	);//	IdealSym
p22	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  22)), 	4	 		);//	percent
p23	= WriteIf(ParamsList !="", 				  StrExtract(ParamsList,   23	), 	""			);//	unused
p24	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  24)), 	0	 		);//	unused
p25	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  25)), 	0	 		);//	BGCol
p26	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  26)), 	9	 		);//	DDSpace
p27	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  27)), 	7	 		);//	IndSpace
p28	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  28)), 	9	 		);//	SigSpace
p29	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  29)), 	6			);//	ArrowSpace
p30	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  30)), 	5	 		);//	TGSpace
p31	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  31)), 	9.5 		);//	UpPerPrc
p32	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  32)), 	51	 		);//	LowPerPrc
p33	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  33)), 	56 		);//	UpPerDD
p34	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  34)), 	32	 		);//	LowPerDD
p35	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  35)), 	53			);//	UpPerTG
p36	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  36)), 	35	 		);//	LowPerTG
p37	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  37)), 	75.5		);//	UpPerIn
p38	=		IIf(ParamsList !="", 	StrToNum(StrExtract(ParamsList,  38)), 	6			);//	LowPerIn


//	Initialize variables
LBuyC = LSellC = Buy = Sell = SellCnd = BuyCond = SellCond = Close - Close;
ind1 = ind2 = ind3 = ind4 = ind5 = ind6 = ind7 = ind8 = xplot1 = xplot2 = xplot3 = Null;
indError = Param1 = Param2 = Param3 = Param4 = Param5 = Param6 = Param7 = Param8 =specialTitle = 0;
nosig = signum = showsell = useIdeal = percent = showExtraTitles = showExtraPlots = shoXplots = 0;
indicSym = Name1 = Name2 = Name3 = Name4 = Name5 = Name6 = Name7 = Name8 = extraTitle1 = extraTitle2 = "";
sigsors = sig = sigL = sigS = NSParamsFileName = SigListFileName = refSig = sigFrom = IdealSym = Nam = Title = "";
showCompareSignal = showIndicator = SRTitleSpace = 1;

//_SECTION_BEGIN("SIGNAL SOURCE");
sigSelect	= ParamList("Select Source of Signals    -    then click 'Reset all'", "Compound Signal,Filtered Moving Average,"+
							"MACD Crossover,MACD Reversal,Multiple Signals,Named Signals,Price Oscillator,Price Reversal,"+
							"RSI Limit Cross,RSI Reversal,Stochastic Crossover,Stochastic Reversal,Trailing Stop,Write Your Own", p0);
sigIdent 	= 	WriteIf(sigSelect=="Compound Signal", "Comp", WriteIf(sigSelect=="Filtered Moving Average", "Ave",
				WriteIf(sigSelect=="MACD Crossover", "MacdX", WriteIf(sigSelect=="MACD Reversal", "MacdR",
				WriteIf(sigSelect=="Multiple Signals", "Mult",
				WriteIf(sigSelect=="Named Signals", "Named", WriteIf(sigSelect=="Price Oscillator", "PrOsc",
				WriteIf(sigSelect=="Price Reversal", "PrRev", WriteIf(sigSelect=="RSI Limit Cross", "RsiLX",
				WriteIf(sigSelect=="RSI Reversal", "RsiR", WriteIf(sigSelect=="Stochastic Crossover", "StoX",
				WriteIf(sigSelect=="Stochastic Reversal", "StoR", WriteIf(sigSelect=="Trailing Stop", "TrSt",
				WriteIf(sigSelect=="Write Your Own", "WrYO", ""))))))))))))));
sigId 		= 	WriteIf(sigSelect=="Compound Signal", "CS", WriteIf(sigSelect=="Filtered Moving Average", "AV",
				WriteIf(sigSelect=="MACD Crossover", "MX", WriteIf(sigSelect=="MACD Reversal", "MR",
				WriteIf(sigSelect=="Multiple Signals", "MS",
				WriteIf(sigSelect=="Named Signals", "NS", WriteIf(sigSelect=="Price Oscillator", "PO",
				WriteIf(sigSelect=="Price Reversal", "PR", WriteIf(sigSelect=="RSI Limit Cross", "RX",
				WriteIf(sigSelect=="RSI Reversal", "RR", WriteIf(sigSelect=="Stochastic Crossover", "SX",
				WriteIf(sigSelect=="Stochastic Reversal", "SR", WriteIf(sigSelect=="Trailing Stop", "TS",
				WriteIf(sigSelect=="Write Your Own", "WO", ""))))))))))))));
sigsel 	= 	IIf(sigSelect=="Compound Signal", 0, IIf(sigSelect=="Filtered Moving Average", 1, IIf(sigSelect=="MACD Crossover", 2,
				IIf(sigSelect=="MACD Reversal", 3, IIf(sigSelect=="Multiple Signals", 4, IIf(sigSelect=="Named Signals", 5,
				IIf(sigSelect=="Price Oscillator", 6,IIf(sigSelect=="Price Reversal", 7, IIf(sigSelect=="RSI Limit Cross", 8,
				IIf(sigSelect=="RSI Reversal", 9,IIf(sigSelect=="Stochastic Crossover", 10, IIf(sigSelect=="Stochastic Reversal", 11,
				IIf(sigSelect=="Trailing Stop", 12, IIf(sigSelect=="Write Your Own", 13, 14))))))))))))));

//_SECTION_END();

//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//XXXX     Enter below the Buy and Sell rules or the names of your included buy/sell rules files    XXXX

#include <Compound Signal.afl>
#include <Filtered Moving Average.afl>
#include <MACD Crossover.afl>
#include <MACD Reversal.afl>
#include <Multiple Signals.afl>
#include <Named Signals.afl>
#include <Price Oscillator.afl>
#include <Price Reversal.afl>
#include <RSI Limit Cross.afl>
#include <RSI Reversal.afl>
#include <Stochastic Crossover.afl>
#include <Stochastic Reversal.afl>
#include <Trailing Stop.afl>
#include <Write Your Own.afl>

//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

if (Title=="")	{	//	the close of this bracket is at the very end of the code

rulesError	= IIf(LastValue(Cum(Buy + Sell)) < 1, 1, 0);

_SECTION_BEGIN("PERIOD OF TEST");
//	set starting default values for the start and end dates of test
BarsString	= WriteVal(BarCount - 253, 1.0, 0)+","+WriteVal(BarCount - 1, 1.0, 0)+","+
					WriteVal(BarCount - 1, 1.0, 0)+","+WriteVal(252, 1.0, 0);

//	retrieve stored values for start and end of test, if available
fh 				= fopen( "ConfigFiles\\StartEnd"+GetChartID()+".bf", "r");
if( fh )
{
   	while( ! feof( fh ) )
   	{
      	BarsString = ( fgets( fh ) );
   	}
	fclose( fh );
}

firstbar			= StrToNum(StrExtract(BarsString, 0));
secondbar		= StrToNum(StrExtract(BarsString, 1));
thirdbar			= StrToNum(StrExtract(BarsString, 2));
sdnum			= StrToNum(StrExtract(BarsString, 3));

Lastbar			= BarCount - 1;
AfterTestBars	= thirdbar - secondbar;
inTestBars		= secondbar - firstbar;
endbar 			= Lastbar - AfterTestBars;
startbar			= endBar - inTestBars;

//	Type in a start date. If no date is typed in, set the date to 252 days before the last date.
dayt				= ParamStr("Type in a Start Date", p1);
datt				= DateToDateNum(dayt);
dat				= IIf(datt==1000000, LastValue(ValueWhen(BIn==BarCount-253, DNum)), datt);
dat 				= Max(dat, LastValue(ValueWhen(BIn==0, DNum)));

// work back until the input date is a FT date
while (LastValue(ValueWhen(DNum==dat, Close))==0 )
{
	dat1			= dat - 1;
	numdat1		= NumToStr(dat1, 8.0, False);
	moda			= StrToNum(StrRight(numdat1, 4));
	yer			= StrToNum(StrLeft(numdat1, StrLen(numdat1) - 4));
	yer			= IIf(moda < 101, yer - 1, yer);
	newmoda		= IIf(moda < 101 OR moda > 1231, 1231, moda);
	dat 			= 10000*yer + newmoda;
}
startDNum		= LastValue(ValueWhen(DNum==dat, BIn));

StaticVarSet("stDNumDiff", Null);

// set up param button for start at typed-in date
datetrigger = ParamTrigger("Enable Start at Date", "Click  Here  to Start at   DATE   Typed-in Above");
if ( datetrigger )
{
	StaticVarSet("stDNumDiff", (BarCount - 1) - startDNum);
	StaticVarSet("stbarDiff",  Null);
	StaticVarSet("enbarDiff",  0);
}

//	setup param buttons for start and end at pole
starttrigger		= 	ParamTrigger("Set Start of Test at Pole", 	"     Or,   Click  Here  to  START   at Pole");
endtrigger 		= 	ParamTrigger("Set End of Test at Pole", 		"             Click  Here  to    END     at Pole");

if( starttrigger )	StaticVarSet("stbarDiff",  (BarCount - 1) - SelectedValue(BIn));
if( endtrigger )		StaticVarSet("enbarDiff",  (BarCount - 1) - SelectedValue(BIn));

startbar			= 	IIf(NOT IsNull(StaticVarGet("stbarDiff")), (BarCount - 1) - StaticVarGet("stbarDiff"),
						IIf(NOT IsNull(StaticVarGet("stDNumDiff")), (BarCount - 1) - StaticVarGet("stDNumDiff"), startbar));
endbar			= 	IIf(NOT IsNull(StaticVarGet("enbarDiff")), (BarCount - 1) - StaticVarGet("enbarDiff"), endbar);

startbar			= Max(0, startbar);
endbar			= Max(0, endbar);

// input error notification
ErrorNote	= 0;
if (endbar <= startbar )	ErrorNote = 1;

//	store start and end bars in a file for initialization of next run
fh 	= fopen( "ConfigFiles\\StartEnd"+GetChartID()+".bf", "w");
if( fh )
{
   	fputs(WriteVal(startbar, 1.0, 0)+","+WriteVal(endbar, 1.0, 0)+","+
				WriteVal(BarCount - 1, 1.0, 0)+","+StaticVarGet("stDNumDiff"), fh );
	fclose( fh );
}

//	range for test
barintest	= BIn >= startbar AND BIn <= endbar;
_SECTION_END();


_SECTION_BEGIN("TRADING DELAY AND HOLDING PERIOD");
dela			= ParamList("Trading Delay", "Delay = 0,Delay = 1,Delay = 2,Delay = 3,Delay = 4,Delay = 5",  p2);
delay			= IIf(dela=="Delay = 0", 0, IIf(dela=="Delay = 1", 1, IIf(dela=="Delay = 2", 2, IIf(dela=="Delay = 3", 3,
					IIf(dela=="Delay = 4", 4, 5)))));
tradeMin		= 	ParamToggle("Minimum hold for all trades or Buys only",
					"Minimum hold for Buys  ( period just below )|Minimum hold for all trades  ( period just below )",  p4);
MinDays		= Param("Minimum Holding Period",  p5, 1, 60, 1);
_SECTION_END();


//	apply Buy/Sell conditions to selected time interval and incorporate min hold and delay
if (sigS==sig)
{
	LBuyC 	= SSellC 		= Flip(Buy, Sell)*barintest;
	LSellC 	= SBuyC 		= (NOT LBuyC)*barintest;
}
else
{
	LBuyC		= LBuyC*barintest;
	SBuyC	= SBuyC*barintest;
	LSellC	= LSellC*barintest;
	SSellC 	= SSellC*barintest;
}


if (MinDays > 1 AND tradeMin==0 AND sigS==sig)
{
	BuyMinHold(startbar, MinDays);
	LBuyC 	= SSellC 		= Flip(Buy, Sell)*barintest;
	LSellC 	= SBuyC 		= (NOT LBuyC)*barintest;
}


if (MinDays > 1 AND tradeMin==1 AND sigS==sig)
{
	MinHold(startbar, MinDays);
	LBuyC 	= SSellC 		= Flip(Buy, Sell)*barintest;
	LSellC 	= SBuyC 		= (NOT LBuyC)*barintest;
}

SBuyC		= IIf(LastValue(Cum(SBuyC))==LastValue(Cum(barintest)), 0, SBuyC);

BHBuyC		= barintest;	//	Buy condition for buy and hold plot

//	Save signal events as new variables
LBuySig		= ExRem(LBuyC, LSellC);
LSellSig		= ExRem(LSellC, LBuyC);
SBuySig		= ExRem(SBuyC, SSellC);
SSellSig		= ExRem(SSellC, SBuyC);

//	incorporate trading delay
debar			= startbar + delay;
LBuyC 		= IIf(BIn>debar, Ref(LBuyC, -delay-1), IIf(BIn==debar, Ref(LBuyC, -delay), LBuyC));
LSellC		= IIf(BIn>debar, Ref(LSellC, -delay-1), IIf(BIn==debar, Ref(LSellC, -delay), LSellC));
SBuyC		= IIf(BIn>debar, Ref(SBuyC, -delay-1), IIf(BIn==debar, Ref(SBuyC, -delay),SBuyC));
SSellC		= IIf(BIn>debar, Ref(SSellC, -delay-1), IIf(BIn==debar, Ref(SSellC, -delay),SSellC));
BHBuyC 		= IIf(BIn>debar, Ref(BHBuyC , -delay-1), IIf(BIn==debar, Ref(BHBuyC , -delay), BHBuyC ));


//	set up the other parameters
_SECTION_BEGIN("TRADING DETAILS");
ShString		= ParamStr("Short Fund", "Short Fund---"+p6);
ShFund		= StrMid(StrToUpper(ShString), 13, 5) ;
trades		= ParamList("Trading Style" , "Long Trades Only,Long & Short,Short Trades Only", p7);
tradetype 	= IIf(trades=="Long Trades Only", 0, IIf(trades=="Long & Short", 1, 2));
MMString	= ParamStr("Money Market Fund", "MM Fund---"+p8);
MMFund		= StrMid(StrToUpper(MMString), 10, 5 );
MMFnd		= MMFund;
_SECTION_END();


_SECTION_BEGIN("CHART APPEARANCE");
fvb 			= Status("firstvisiblebar");
lvb 			= Status("lastvisiblebar");
startInd		= fvb;
endInd		= Min(LastValue(BarIndex()), Max(Lvb - 1, 0));
statPer		= endInd - startInd;
dummy		= ParamStr("..", "( Param just below is  for scaling Trading Result )");
MaxPrice		= Param("Trading Maximum Ann Gain (for scaling)", p9, 0, 200, 2);  // sets price plot scaling
pmax			= (1 + MaxPrice/100)^((endInd - startInd)/252) - 1;
lossType		= ParamList("Loss Type Plotted", "Showing Trade Gain or Loss ( scaling - next Param ),"+
						"Showing Trade DrawDown ( scaling - next Param ),"+
						"Showing Total DrawDown ( scaling - next Param )", p10);
LT				= IIf(LossType=="Showing Trade Gain or Loss ( scaling - next Param )", 0,
						IIf(LossType=="Showing Trade DrawDown ( scaling - next Param )", 1, 2));
LossTyp		= LT;
DDMax		= Param("Drawdown Maximum (for scaling)", p11, 0, 60, 2);  // sets drawdown plot scaling
pmin			= - DDMax;
pmin			= IIf(LT==0, pmin/2, pmin);
logPlot		= ParamToggle("Log or Linear Plot?", "Using Linear Plot - click to change,Using Logarithmic Plot - click to change",  p12);
showBH		= ParamToggle("Show the Buy and Hold Plot?", "Buy & Hold PLot Hidden - click to change|Buy & Hold Plot Shown - click to change",  p14);
showStats	= ParamToggle("Show Performance Statistics?",
						"Click to Show All Performance Statistics|Click to Show Abreviated Performance Statistics", p15);
if (showExtraPlots)	shoXplots = ParamToggle("Show Indicator Price and Averages?", 
											"Not Showing Indicator Price and Averages - click to change,"+
											"Showing Indicator Price AND Averages - click to change", 0);
showPoleGn	= ParamToggle("Show Gain/Loss from Pole?", "Not Showing Gain/Loss from Start Mark - click to change,"+
											"Showing Gain/Loss from Start Mark - click to change", p16);
riskfree		= ParamList("Risk Free Annual Return", "Risk Free = 0 %,Risk Free = 1 %,Risk Free = 2 %,Risk Free = 3 %,"+
								"Risk Free = 4 %,Risk Free = 5 %,Risk Free = 6 %,Risk Free = 7 %,Risk Free = 8 %,"+
								"Risk Free = 9 %,Risk Free = 10 %,Risk Free = 11 %,Risk Free = 12 %,Risk Free = 13 %,"+
								"Risk Free = 14 %,Risk Free = 15 %,Risk Free = 16 %,Risk Free = 17 %,Risk Free = 18 %", p17);
riskfree		= StrToNum(StrMid(riskfree, 12, 2));
_SECTION_END();


if (showCompareSignal)
{
	_SECTION_BEGIN("COMPARISON SIGNAL");
	showSell	= ParamToggle("Show the Comparison Sell Periods?", "Comparison Sell Periods Hidden - click to change|Comparison Sell Periods Shown - click to change",  p18);
	useIdeal	= ParamToggle("Use Ideal Signal or Chosen signal?", "Using Signal below  for comparison - click to change|Using Ideal ZZ Signal for comparison - click to change", p19);
	refSig	= StrToUpper(ParamStr("Name of Comparison Signal", p20) );
	ZZString	= ParamStr("Symbol for Ideal ZigZag Signal", "ZigZag Fund---"+p21);
	IdealSym	= StrMid(StrToUpper(ZZString), 14, 5 );
	dummy	= ParamStr(". .", "( number just below is ZZ percent)");
	percent	= Param(".                                                 Zig Percent",  p22, 1, 20, 1);
	_SECTION_END();
}
else
{
	showSell	= p18;
	useIdeal	= p19;
	refSig	= StrToUpper(p20);
	IdealSym	= StrToUpper(p21);
	percent	= p22;
}


_SECTION_BEGIN("EXPORT FILES");
exportsig		=  ParamTrigger(" .                              Write FastTrack Signal File?", "Click to Write FastTrack Signal File");
exportfnus	=  ParamTrigger(" .                                    Write Signal FNU Files?", "Click to Write Signal FNU Files");
Flipped		= ParamToggle("Export Raw or 'Flipped' Buy/Sell States?", "Exporting Raw Buy and Sell States,"+
								"Exporting 'Flipped' Buy and Sell States", 1);
_SECTION_END();

//  Export FNU files to FT\ and/or AmiBroker\ABFNUs\
if (exportfnus)
{
	if (Flipped)	{	BuyCond = Flip(BuyCond, SellCond); 	SellCond = NOT BuyCond;	}

	fmkdir( "ABFNUs" );	//	make this directory to hold FNUs in AmiBroker, if it doesn't exist.
	By				= LBuySig +1;
	Sel			= LSellSig +1;
	ByC			= BuyCond;
	SelC			= SellCond;
	naim			= WriteIf(sigIdent=="Named", sig, WriteIf(sigIdent=="Comp", "Comp", nam));
	namB 			= WriteIf(sigIdent=="Named", StrLeft(sig, 4)+"B",
							StrLeft(naim, 1)+StrToLower(StrMid(naim, 1, 1))+sigId+"B");
	namS			= WriteIf(sigIdent=="Named", StrLeft(sig, 4)+"S",
							StrLeft(naim, 1)+StrToLower(StrMid(naim, 1, 1))+sigId+"S");
	namBC 		= WriteIf(sigIdent=="Named", StrLeft(sig, 3)+"BC",
							StrLeft(naim, 1)+sigId+"BC");
	namSC		= WriteIf(sigIdent=="Named", StrLeft(sig, 3)+"SC",
							StrLeft(naim, 1)+sigId+"SC");
	naam			= WriteIf(sigIdent=="Named", sig+"A", WriteIf(sigIdent=="Comp", "CompSig",
								WriteIf(sigIdent=="Mult", "MultSig",
								StrLeft(Nam, 1)+StrToLower(StrMid(Nam, 1, 2))+sigIdent)));
	descriptB		= WriteIf(sig !="", sig, naam)+" Buy days";
	descriptS		= WriteIf(sig !="", sig, naam)+" Sell days";
	descriptBC	= WriteIf(sig !="", sig, naam)+" Buy state days";
	descriptSC	= WriteIf(sig !="", sig, naam)+" Sell state days";

	if (NOT StrRight(sig, 2)=="-L" AND NOT StrRight(sig, 2)=="-l") 	//	if using a binary signal
	{
		script    = GetScriptObject();
		if (FTDrive != "none")	//	writing Buys and Sells to FT\ and writing BuyCond and SellCond to AmiBroker\ABFNUs for import
		{
			rc      	= script.FTPutFNU(FTDrive, "By", descriptB, namB, DateNum());	//writes file to FT\
			rc      	= script.FTPutFNU(FTDrive, "Sel", descriptS, namS, DateNum());	//writes file to FT\
			rc      	= script.ABPutFNU("ByC", descriptBC, namBC, DateNum());		//writes file to AmiBroker\ABFNUs
			rc      	= script.ABPutFNU("SelC", descriptSC, namSC, DateNum());		//writes file to AmiBroker\ABFNUs
			Title = nl(2)+sp(10)+"Writing "+FTDrive+"\\FT\\"+namB+".fnu ("+descriptB+") and "+
							FTDrive+"\\FT\\"+namS+".fnu ("+descriptS+")"+
					nl(2)+sp(10)+"The Buy and Sell days files have values of 1 and 2, so 1 should be subtracted"+
					nl(1)+sp(22)+"from their resultant arrays to provide values of 0 and 1."+
					nl(2)+sp(10)+"Writing AmiBroker\\ABFNUs\\"+namBC+".fnu ("+descriptBC+") and "+
					nl(1)+sp(22)+"AmiBroker\\ABFNUs\\"+namSC+".fnu ("+descriptSC+")"+
					nl(2)+sp(10)+"The files in AmiBroker\\ABFNUs\\ should be imported into AmiBroker with the "+
					nl(1)+sp(10)+"ASCII import tool. Then they can be accessed with the Foreign() function."+
					nl(2)+sp(10)+"(The files will include only the period of the history of the current symbol.)"+
					nl(2)+sp(10)+"Click to restore the chart";
		}
		else
		{
			rc      	= script.ABPutFNU("By", descriptB, namB, DateNum()); 		//writes file to AmiBroker\ABFNUs
			rc      	= script.ABPutFNU("Sel", descriptS, namS, DateNum()); 		//writes file to AmiBroker\ABFNUs
			rc      	= script.ABPutFNU("ByC", descriptBC, namBC, DateNum()); 	//writes file to AmiBroker\ABFNUs
			rc      	= script.ABPutFNU("SelC", descriptSC, namSC, DateNum()); //writes file to AmiBroker\ABFNUs
			Title = nl(2)+sp(10)+"Writing AmiBroker\\ABFNUs\\"+namB+".fnu ("+descriptB+") and "+
					nl(1)+sp(22)+"AmiBroker\\ABFNUs\\"+namS+".fnu ("+descriptS+")"+
					nl(2)+sp(10)+"Writing AmiBroker\\ABFNUs\\"+namBC+".fnu ("+descriptBC+") and "+
					nl(1)+sp(22)+"AmiBroker\\ABFNUs\\"+namSC+".fnu ("+descriptSC+")"+
					nl(2)+sp(10)+"The files in AmiBroker\\ABFNUs\\ should be imported into AmiBroker with the "+
					nl(1)+sp(10)+"ASCII import tool. Then they can be accessed with the Foreign() function."+
					nl(2)+sp(10)+"The Buy and Sell days files have values of 1 and 2, so 1 should be subtracted"+
					nl(1)+sp(22)+"from their resultant arrays to provide values of 0 and 1."+
					nl(2)+sp(10)+"(The files will include only the period of the history of the current symbol.)"+
					nl(2)+sp(10)+"Click to restore the chart";
		}
	}
	else
	{
		Title = nl(2)+sp(20)+"Signal FNU Files can only be written for Bi-State Signals"+
											nl(2)+sp(20)+"Click to restore chart";
	}
}

//	export signal to FT\SIG\
if (exportsig)
{
	if (FTDrive != "none")
	{
		fmkdir( "C:\\FT\\SIG" );	//	make this directory to hold signals, if it doesn't exist.
		if (NOT StrRight(sig, 2)=="-L" AND NOT StrRight(sig, 2)=="-l") 	//	if using a binary signal
		{
			naam		= WriteIf(sigIdent=="Named", sig+"A", WriteIf(sigIdent=="Comp", "CompSig",
								WriteIf(sigIdent=="Mult", "MultSig",
								StrLeft(Nam, 1)+StrToLower(StrMid(Nam, 1, 2))+sigIdent)));
			script    	= GetScriptObject();
			rc         	= script.FTPutSig(FTDrive, naam, DateNum());
			Title 		= nl(2)+sp(10)+"Writing   "+naam+".sig"+
							nl(2)+sp(10)+"(The files will include only the period of the history of the current symbol.)"+
							nl(2)+sp(10)+"Click to restore chart";
		}
		else
		{
			Title = nl(2)+sp(20)+"Signal Files can only be written for Bi-State Signals."+
											nl(2)+sp(20)+"Click to restore chart";
		}
	}
	else
	{
		Title	= 	nl(2)+sp(10)+"FT Signal files can be written only if you have an FT\\ directory directly under a drive letter. "+
					nl(3)+sp(10)+"Even if you don't use FastTrack, you can create a special directory, such as C:\\FT\\. The "+
					nl(1)+sp(10)+"first time you export a signal file, a subdirectory, FT\\SIG\\ will be automatically created "+
					nl(1)+sp(10)+"to receive the file. Exported signal files, and any other FT signal files you have gotten from "+
					nl(1)+sp(10)+"other sources and  placed in the FT\\SIG\\ directory, can be imported for use in AmiBroker. "+
					nl(1)+sp(10)+"You will also be able to write FNU files of AmiBroker arrays to the FT\\ directory. These can "+
					nl(1)+sp(10)+"be imported using AmiBroker's ASCII importer and then accessed via the Foreign() function. "+
					nl(3)+sp(10)+"If you are going to make the FT\\ directory, close AmiBroker and delete the file, "+
					nl(2)+sp(10)+"AmiBroker\\ConfigFiles\\FTDrive.bf  "+
					nl(2)+sp(10)+"before making the new FT\\ directory. When AmiBroker is reopened, the config file will be "+
					nl(2)+sp(10)+"recreated with the new FT\\ location information. "+
					nl(3)+sp(10)+"Click to restore chart";
	}
}


// make inverse of fund if no entry for short fund
fun 			= Close;
if (ShString=="Short Fund---")	
{
	shrt 		= 0;
	rc			= 0.01*ROC(fun, 1);
	Ohead	= 0;//0.0001;	//  <<<< Put in a number for short fund overhead, if desired
	shrt[0]	= Close[0];
	for (i = 1; i < BarCount; i++)    shrt[i] =  shrt[i-1] * (1 -rc[i] - Ohead); //  Create inverse of fund
}
else 	shrt	= Foreign(ShFund, "Close");
ShortError	= IIf(LastValue(Cum(NOT IsEmpty(shrt))) < BarCount - startbar AND tradetype	!=0, 1, 0);
ShFund		= WriteIf(ShortError, "", ShFund);

fun			= IIf(tradetype != 2, fun, 0);		//  Determine via Parameters whether to trade long
ind				= IIf(tradetype != 0, shrt, 0);	//  Determine via Parameters whether to trade short
LBuyC			= IIf(tradetype != 2, LBuyC, 0);	//  Determine via Parameters whether to trade long
SBuyC		= IIf(tradetype != 0, SBuyC, 0);	//  Determine via Parameters whether to trade short

//	establish money market buy condition
MMBuyC		= IIf((LBuyC + SBuyC)==0, barintest, 0);

//	find the daily rate of change of the money market fund
if (MMString=="MM Fund---")	{	MM = 0;	RCMM	 = 0;	MMFnd = "0% MM";	}
else
{
	MM		= Foreign(MMFund, "Close");
	RCM		= Nz(ROC(MM, 21)/21 );					//	this and the next line make a MM
	RCMM		= Nz(Ref(ROC(MM, 21)/21, 21) );		//	with daily increases, like Trade

	//RCMM		= Nz(ROC(MM, 1));					// 	this MM increases once a month, like FastTrack
}

MMError		= IIf(LastValue(Cum(NOT IsEmpty(MM))) < BarCount - startbar, 1, 0);
MMFund		= WriteIf(MMError, "", MMFund);

//	calculate the trading result and the buy and hold result
result 		= 1000;
bh				= 1000;
dailyGain 	= LBuyC*ROC(fun,1) + SBuyC*ROC(ind, 1) + MMBuyC*RCMM;
bhGain		= BHBuyC*ROC(Close, 1);

for ( m = startbar+1; m < endbar+1; m++)
{
	result[m] = result[m-1]	*0.01*(100 + dailyGain[m]);
	bh[m]		= bh[m-1]		*0.01*(100 + bhGain[m]);
}
for ( n = m; n < BarCount; n++)
{
	result[n] = result[m-1];
	bh[n]		= bh[m-1];
}


//	Calculate the gain or drawdown on an individual trade or the total period drawdown
tradestart		= IIf(Cum(LBuySig OR SBuySig OR LSellSig OR SSellSig)==1,
						LBuySig OR SBuySig OR LSellSig OR SSellSig,
						Ref(LBuySig, -delay) OR Ref(SBuySig, -delay) OR Ref(LSellSig, -delay) OR Ref(SSellSig, -delay) );
period			= BarsSince(IIf(LT==2, BIn==startbar, tradestart)) + 1;
HighPoint		= Max(HHV(result, period), IIf(BarsSince(tradestart) > 0,
						ValueWhen(tradestart, result), ValueWhen(tradestart, result, 2)));
Cdd				= 100*(result - HighPoint) / HighPoint;
MDDPer			= BarsSince(BIn==startbar)+1;
MDDHighPoint	= HHV(result, MDDPer);
MDDCdd			= 100*(result - MDDHighPoint) / MDDHighPoint;
MDD				= LastValue(Lowest(MDDCdd));
tradegain		= 100*(result - ValueWhen(tradestart, result)) / ValueWhen(tradestart, result);
prevtradegain	= 100*(result - ValueWhen(tradestart, result, 2)) / ValueWhen(tradestart, result, 2);
tradegain		= IIf(BarsSince(tradestart)>0, tradegain, prevtradegain);
Loss				= IIf(LT !=0, Cdd, tradegain);
Loss				= IIf(IsEmpty(Loss), 0, Loss);
MaxLoss			= LastValue(Lowest(Loss));
PoleLoss			= SelectedValue(Lowest(Loss));
MaxGain			= LastValue(Highest(Loss));
MaxLossBI		= LastValue(ValueWhen(Loss==MaxLoss, BIn));
MaxGainBI		= LastValue(ValueWhen(Loss==MaxGain, BIn));

//	Calculate remaining performance measures for period of test
trs					= LastValue(Cum(LSellSig));	//	Find number of trades
trs					= IIf(LSellSig[startbar]==1, trs - 1, trs);
per				= (BarsSince(BIn==startbar));
Length			= endbar - startbar;
Yrs 				= Length / 251.5;		//	252 to match FT's calc of ann gain
tradeLength		= 1.44*Length / trs;	//approx. calendar days

resGain			= 100*(result[endbar] / result[startbar] - 1);
resAnnGn		= 100*LastValue((((resGain)/100+1)^(1 / yrs)) - 1);
resHiPt			= HHV(result, per +1);
resCdd			= 100*(result - resHiPt) / resHiPt;
resUI				= LastValue(sqrt(Sum(resCdd^2, Length)/Length));
resMDD			= LastValue(Lowest(resCdd));
resUPI			= Nz((resAnnGn - riskfree) / resUI);
resRC				= IIf(BarIndex()==0, 0, ROC(result, 1));
resStdDev 		= LastValue(ValueWhen(BarIndex()==endbar, StDev(resRC, Length)));
resSharp			= Nz((resAnnGn - (riskfree + 2)) / (resStdDev*sqrt(252)));
resAOM			= Nz(-resAnnGn/resMDD);
resRRR			= resAnnGn*resAOM/10;

bhGain			= 100*(bh[endbar] / bh[startbar] - 1);
bhAnnGn			= 100*LastValue((((bhGain)/100+1)^(1 / yrs)) - 1);
bhHiPt			= HHV(bh, per +1);
bhCdd				= 100*(bh - bhHiPt) / bhHiPt;
bhUI				= LastValue(sqrt(Sum(bhCdd^2, Length)/Length));
bhMDD			= LastValue(Lowest(bhCdd));
bhUPI				= Nz((bhAnnGn - riskfree) / bhUI);
bhRC				= IIf(BarIndex()==0, 0, ROC(bh, 1));
bhStdDev 		= LastValue(ValueWhen(BarIndex()==endbar, StDev(bhRC, Length)));
bhSharp			= Nz((bhAnnGn - (riskfree + 2)) / (bhStdDev*sqrt(252)));
bhAOM			= Nz(-bhAnnGn/bhMDD);
bhRRR			= bhAnnGn*bhAOM/10;


//	calculate gains for plotting and make numbers for log plot
nlresult			= result;
nlbh				= bh;
fvb 				= Status("firstvisiblebar");
result				= (result - result[fvb]) / result[fvb];
bh					= (bh  - bh[fvb]) / bh[fvb];
baseline			= 0;

if (logPlot)
{
	result		 	= 100*log10(result+1);
	bh				= 100*log10(bh+1);
	pmax			= 100*log10(pmax+1);
	baseline 		= 100*log10(baseline+1);
}


//	find the comparison signal sell periods if they are to be plotted
ZZError			= 0;
if (showSell AND showCompareSignal)
{
	if (useIdeal)
	{
		//	calculate ideal sell periods
		Clos		= Foreign(IdealSym, "Close");

		ZZError	= IIf(LastValue(Cum(NOT IsEmpty(Clos))) < BarCount - startbar, 1, 0);
		IdealSym	= WriteIf(ZZError, "", IdealSym);

		z			= Zig(Clos, percent);

		By 			= ROC(z, 1) < 0 AND Ref(ROC(z, 1), 1) > 0;
		Sel		= ROC(z, 1) > 0 AND Ref(ROC(z, 1), 1) < 0;

		n = -1;
		do {n = n+1;}
		while (By[n]==0 AND Sel[n]==0 AND n < BarCount - 1);
		if (By[n]==1)	Sel[0] = 1;
		else				By[0] = 1;

		SellCnd	= Flip(Sel, By);
	}
	else
	{
		// 	get signal from AmiBroker, if it exists
		signl			= Foreign(refSig, "Close");
		sigPresent	= LastValue( Highest(signl));
		if (sigPresent)	SellCnd	= NOT signl;

		else	if (FTDrive != "none")		//	get signal from FT
		{
			script     	= GetScriptObject();
			signl        	= script.FTGetSig(FTDrive, refSig, DNum);
			SellCnd	= Flip(Sell, Buy);
		}
	}
}


_SECTION_BEGIN("COLOR SCHEME");
ChangeCol	= 0;
BGColor		= ParamList("Select Background Color -  then click 'Reset all'", "Black Background,"+
								"Light Grey Background,White Background", p25);
BGCol			= IIf(BGColor=="Black Background", 0, IIf(BGColor=="Light Grey Background", 1, 2));
SellColr		= IIf(BGCol==0, 19, IIf(BGCol==1, 34, 51));
BGColr		= IIf(BGCol==0, 16, IIf(BGCol==1, 47, 55));
ChangeCol	= IIf(BGCol==p25, 0, 1);

if (BGCol !=p25)
{
	ChangeCol	= 1;
	ColName		= WriteIf(BGCol==1, BGColor, StrToUpper(BGColor));
	Title			= ec(colorRed)+	nl(3)+sp(0)+	"Before clicking anywhere else, click the 'Reset all' button at the bottom of the Parameter window to"+
											nl(2)+sp(0)+	"change to the default color scheme for the "+ColName+". If you first click on the chart or"+
											nl(2)+sp(0)+	"make any other changes, the color scheme will be incorrect for the "+ColName+". Repair"+
											nl(2)+sp(0)+	"this by clicking on another background color and then again on your choice and then click 'Reset all'.";
}
_SECTION_END();

//	retrieve stored color information
ColorsList			= "";
ColorsFileName		= "ConfigFiles\\Colors"+GetChartID()+".bf";

if (BGColor=="Black Background")
{
  	   c0	  =		32	;//	ColFund
  	   c1	  =	  	43	;//	ColIndex
  	   c2	  =	  	39	;//	ColBH
  	   c3	  =	  	55	;//	ColTitle
  	   c4	  =	  	47	;//	ColBHT
  	   c5	  =	  	41	;//	ColDate
  	   c6	  =	  	42	;//	ColWarn
  	   c7	  =	  	55	;//	ColInd1
  	   c8	  =	  	42	;//	ColInd2
  	   c9	  =	  	32	;//	ColInd3
  	   c10    =	  	43	;//	ColInd4
  	   c11    =	  	36	;//	ColInd5
  	   c12    =	  	55	;//	ColInd6
  	   c13    =	  	47	;//	ColInd7
  	   c14    =	  	47	;//	ColInd8
}
else
{
  	if (BGColor=="Light Grey Background")
	{
	  	   c0	  =		32	;//	ColFund
	  	   c1	  =	  	27	;//	ColIndex
	  	   c2	  =	  	55	;//	ColBH
	  	   c3	  =	  	16	;//	ColTitle
	  	   c4	  =	  	55	;//	ColBHT
	  	   c5	  =	  	41	;//	ColDate
	  	   c6	  =	  	29	;//	ColWarn
	  	   c7	  =	  	55	;//	ColInd1
	  	   c8	  =	  	42	;//	ColInd2
	  	   c9	  =	  	32	;//	ColInd3
	  	   c10    =	  	27	;//	ColInd4
	  	   c11    =	  	30	;//	ColInd5
	  	   c12    =	  	55	;//	ColInd6
	  	   c13    =	  	39	;//	ColInd7
	  	   c14    =	  	39	;//	ColInd8
	}
	else
	{
	  	   c0	  =		32	;//	ColFund
	  	   c1	  =	  	43	;//	ColIndex
	  	   c2	  =	  	39	;//	ColBH
	  	   c3	  =	  	16	;//	ColTitle
	  	   c4	  =	  	39	;//	ColBHT
	  	   c5	  =	  	29	;//	ColDate
	  	   c6	  =	  	32	;//	ColWarn
	  	   c7	  =	  	16	;//	ColInd1
	  	   c8	  =	  	49	;//	ColInd2
	  	   c9	  =	  	32	;//	ColInd3
	  	   c10    =	  	43	;//	ColInd4
	  	   c11    =	  	30	;//	ColInd5
	  	   c12    =	  	29	;//	ColInd6
	  	   c13    =	  	39	;//	ColInd7
	  	   c14    =	  	39	;//	ColInd8
	}
}

fh 						= fopen( ColorsFileName, "r");
if( fh )
{
   	while( ! feof( fh ) )
   	{
      	ColorsList = fgets( fh );
   	}
	fclose( fh );
}

c0		=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,    0)), 	c0		 	);//	ColFund
c1		=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,    1)), 	c1			);//	ColIndex
c2		=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,    2)), 	c2		 	);//	ColBH
c3		=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,    3)), 	c3		 	);//	ColTitle
c4		=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,    4)), 	c4			);//	ColBHT
c5		=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,    5)), 	c5		 	);//	ColDate
c6		=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,    6)), 	c6			);//	ColWarn
c7		=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,    7)), 	c7			);//	ColInd1
c8		=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,    8)), 	c8		 	);//	ColInd2
c9		=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,    9)), 	c9		 	);//	ColInd3
c10	=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,  10)),    c10	 	);//	ColInd4
c11	=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,  11)), 	c11	 	);//	ColInd5
c12	=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,  12)), 	c12	 	);//	ColInd6
c13	=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,  13)), 	c13	 	);//	ColInd7
c14	=		IIf(ColorsList !="", 	StrToNum(StrExtract(ColorsList,  14)),     c14	 	);//	ColInd8


_SECTION_BEGIN("COLORS");
ColFund 		= 	ParamColor("Fund Color", C0);
ColIndex 		= 	ParamColor("Index Color", C1);
ColBH 		= 	ParamColor("Buy-and-Hold Color", C2);
ColTitle		= 	ParamColor("Title Color", C3);
ColBHT	 	= 	ParamColor("Buy-and-Hold Title Color", C4);
ColDate		= 	ParamColor("Date Color", c5);
ColWarn		=	ParamColor("Warning Color", c6);
ColInd1		= 	ParamColor("Indicator1 Color", c7);
ColInd2		= 	ParamColor("Indicator2 Color", c8);
ColInd3		= 	ParamColor("Indicator3 Color", c9);
ColInd4		= 	ParamColor("Indicator4 Color", c10);
ColInd5		= 	ParamColor("Indicator5 Color", c11);
ColInd6		= 	ParamColor("Indicator6 Color", c12);
ColInd7		= 	ParamColor("Indicator7 Color", c13);
ColInd8		= 	ParamColor("Indicator8 Color", c14);
Col			= 	IIf(trades=="Long & Short", IIf(LBuyC==1, ColFund, IIf(SBuyC==1, ColIndex, ColTitle)),
						IIf(trades=="Long Trades Only", IIf(LBuyC==1, ColFund, ColTitle), IIf(SBuyC==1, ColIndex, ColTitle)));
Colloss		= 	IIf(LT==2, IIf(LBuyC==1, ColFund, IIf(SBuyC==1, ColIndex, ColTitle)),
						IIf(LBuyC==1, ColFund, ColIndex) );
_SECTION_END();


_SECTION_BEGIN("TITLE SPACING");
DDSpace			= 	Param("DrawDown Title Spacing Lines", p26, 2, 20, 1);
DDSpacing		=	DDSpace;
IndSpace			= 	Param("Indicator Title Spacing Lines", p27, 2, 20, 1);
IndSpacing		= 	IIf(sigsors=="", indSpace, indSpace + 1);
SigSpace			= 	Param("Signal Statement Spacing Lines", p28, 0, 22, 1);
SigSpacing		= 	IIf(sigsors !="", SigSpace - 6, IIf(showIndicator, SigSpace, SigSpace - 8));
ArrowSpace	 	= 	Param("Signal Arrow Spacing from Bottom", p29, -20, 400, 2);
ArrowSpacing	= 	ArrowSpace;
TGSpace			= 	Param("Trade Gain or Loss Title Spacing Lines", p30, 2, 12, 1);
TGSpacing		= 	IIf(sigsors=="", TGSpace, TGSpace + 1);
_SECTION_END();


_SECTION_BEGIN("PLOT SIZING");
UpPerPrc		= 	Param("Trading Plot Upper Frespace %", p31, 1, 99, 0.5);
LowPerPrc	= 	Param("Trading Plot Lower Frespace %",  p32, 1, 99, 0.5);
LowPercPrc	=	IIf(sigsors=="", LowPerPrc, LowPerPrc - 13);
ULP			= 	U4(result, bh, pmax, baseline, LowPercPrc, UpPerPrc);
LLP			= 	L4(result, bh, pmax, baseline, LowPercPrc, UpPerPrc);

posloss		= 	IIf(Loss > 0, Loss, 0);
negloss		= 	IIf(Loss < 0, Loss, 0);
MaxGain		= 	IIf(BIn >=MaxGainBI, MaxGain, 0);
MaxLoss		= 	IIf(BIn >=MaxLossBI, MaxLoss, 0);
UpPerDD		= 	Param("DrawdownPlot  Upper Frespace %",  p33, 1, 99, 0.5);
UpPercDD	=	IIf(sigsors=="", UpPerDD, UpPerDD + 15);
LowPerDD	= 	Param("Drawdown Plot Lower Frespace %",  p34, 1, 99, 0.5);
LowPercDD	=	IIf(sigsors=="", LowPerDD, LowPerDD - 17);
UpPerTG		= 	Param("Trade Gain Plot Upper Frespace %",  p35, 1, 99, 0.5);
UpPercTG	=	IIf(sigsors=="", UpPerTG, UpPerTG + 12);
LowPerTG	= 	Param("Trade Gain Plot Lower Frespace %",  p36, 1, 99, 0.5);
LowPercTG	=	IIf(sigsors=="", LowPerTG, LowPerTG - 17);
ULD			= 	IIf(LT !=0,
					U4(pmin, Loss, MaxLoss, 0, LowPercDD, UpPercDD),
					U6(-6*pmin, pmin, negloss, posloss, MaxLoss, MaxGain, LowPercTG, UpPercTG));
LLD			= 	IIf(LT !=0,
					L4(pmin, Loss, MaxLoss, 0, LowPercDD, UpPercDD),
					L6(-6*pmin, pmin, negloss, posloss, MaxLoss, MaxGain, LowPercTG	, UpPercTG));

NotNull		= 	IIf(NOT IsNull(ind1), ind1, IIf(NOT IsNull(ind2), ind2,
					IIf(NOT IsNull(ind3), ind3, IIf(NOT IsNull(ind4), ind4,
					IIf(NOT IsNull(ind5), ind5, IIf(NOT IsNull(ind6), ind6,
					IIf(NOT IsNull(ind7), ind7, ind8)))))));
in1			= 	IIf(IsNull(ind1), NotNull, ind1);
in2 			= 	IIf(IsNull(ind2), NotNull, ind2);
in3 			= 	IIf(IsNull(ind3), NotNull, ind3);
in4 			= 	IIf(IsNull(ind4), NotNull, ind4);
in5 			= 	IIf(IsNull(ind5), NotNull, ind5);
in6 			= 	IIf(IsNull(ind6), NotNull, ind6);
in7 			= 	IIf(IsNull(ind7), NotNull, ind7);
in8 			= 	IIf(IsNull(ind8), NotNull, ind8);
UpPerIn		= 	Param("Indicator Plot Upper Frespace %",  p37, 1, 99, 0.5);
UpPercIn		= 	IIf(sigsors=="", UpPerIn, UpPerIn + 14.5);
LowPerIn	= 	Param("Indicator Plot Lower Frespace %",  p38, 1, 99, 0.5);
LowPercIn	= 	IIf(sigsors=="", LowPerIn, LowPerIn - 0);
ULI			= 	U8(in1, in2, in3, in4 ,in5, in6, in7, in8, LowPercIn, UpPercIn);
LLI			= 	L8(in1, in2, in3, in4, in5, in6, in7, in8, LowPercIn, UpPercIn);

xNotNull		= 	IIf(NOT IsNull(xplot1), xplot1, IIf(NOT IsNull(xplot2), xplot2, IIf(NOT IsNull(xplot3), xplot3, Null)));
xpl1			= 	IIf(IsNull(xplot1), NotNull, xplot1);
xpl2 			= 	IIf(IsNull(xplot2), NotNull, xplot2);
xpl3 			= 	IIf(IsNull(xplot3), NotNull, xplot3);
ULXP			= 	U3(xpl1, xpl2, xpl3,  LowPercIn, UpPercIn);
LLXP			= 	L3(xpl1, xpl2, xpl3,  LowPercIn, UpPercIn);

UISP			=	U1(SellCnd, LowPercIn, UpPercIn);
LISP			=  	L1(SellCnd, LowPercIn, UpPercIn);
_SECTION_END();


//	Plotting section starts here
if (exportfnus==0 AND exportsig==0 AND ChangeCol==0 AND specialTitle==0)	{
bh			= 	IIf(showBH, bh, Null);

Plot(0, 				"", 				ColTitle, styleHidden |	styleNoLabel);  //  makes base line for arrows

//	plot trading result and b&h
Plot(result, 			"result", 			Col, 							styleNoLabel | 	styleOwnScale, LLP, ULP);
Plot(bh, 				"Buy&Hold", 	ColBH, 						styleNoLabel |	styleOwnScale,  LLP, ULP);
Plot(baseline, 		"", 				ColBH, 							styleNoLabel |	styleOwnScale, LLP, ULP);
Plot(pmax,			"", 				ColBH, 		styleDashed | 	styleNoLabel | 	styleOwnScale, LLP, ULP);

//	plot drawdown or trade gain/loss
Loss			= 	IIf(LT==2, Loss, IIf(LBuyC OR Ref(LBuyC, 1) OR SBuyC OR Ref(SBuyC, 1), Loss, Null));
Plot(0, 				"", 				ColTitle, 						styleNoLabel | 	styleOwnScale, LLD, ULD);
Plot(Loss, 			"", 				ColLoss, 						styleNoLabel |	styleOwnScale, LLD, ULD);
Plot(IIf(BIn >=MaxLossBI, MaxLoss, Null),
						"", 				ColBHT, 											styleOwnScale, LLD, ULD);
Plot(IIf(BIn >=MaxGainBI AND LT==0, MaxGain, Null),
						"", 				ColBHT, 											styleOwnScale, LLD, ULD);
Plot(pmin, 			"", 				ColBH, 	styleDashed | styleNoLabel | 	styleOwnScale, LLD, ULD);
Loss			= IIf(IsEmpty(Loss), 0, Loss);	//	convert Nulls to zeroes for Title

//	extra plots
if (shoXplots)
{
	Plot(xplot1, 			"", 				ColInd1, 						styleNoLabel | 	styleOwnScale, LLXP, ULXP);
	Plot(xplot2, 			"", 				ColInd5, 						styleNoLabel | 	styleOwnScale, LLXP, ULXP);
	Plot(xplot3, 			"", 				ColInd6, 						styleNoLabel | 	styleOwnScale, LLXP, ULXP);
}

//	plot indicator
Plot(Ind1, 			"Ind1", 			ColInd1, 						styleNoLabel | 	styleOwnScale, LLI, ULI);
Plot(Ind2, 			"Ind2", 			ColInd2, 						styleNoLabel | 	styleOwnScale, LLI, ULI);
Plot(Ind3, 			"Ind3", 			ColInd3, 						styleNoLabel | styleOwnScale, LLI, ULI);
Plot(Ind4, 			"Ind4", 			ColInd4, 						styleNoLabel | styleOwnScale, LLI, ULI);
Plot(Ind5, 			"Ind5", 			ColInd5, 						styleNoLabel | 	styleOwnScale, LLI, ULI);
Plot(Ind6, 			"Ind6", 			ColInd6, 	styleHistogram|styleNoLabel | styleOwnScale, LLI, ULI);
Plot(Ind7, 			"Ind7", 			ColInd7, 	styleDashed |	styleNoLabel | 	styleOwnScale, LLI, ULI);
Plot(Ind8, 			"Ind8", 			ColInd8, 	styleDashed |	styleNoLabel | 	styleOwnScale, LLI, ULI);

//	signal marks at bottom of window
Plot(LBuySig,		 "", 				ColFund, styleHistogram|styleNoLabel|	styleOwnScale, 0, 35);
Plot(LSellSig, 		"", 					ColIndex, styleHistogram|styleNoLabel|	styleOwnScale, 0, 35);

//	plotshapes arrows
PlotShapes(IIf(sigS==sig, shapeUpArrow*LSellSig, Null), ColIndex, 0, 0, ArrowSpacing);
PlotShapes(IIf(sigS==sig, shapeUpArrow*LBuySig, Null), ColFund, 0, 0, ArrowSpacing);

//	extra signal marks for tristate trading
Plot(IIf(sigS !=sig, SBuySig, Null), "", ColIndex, 	styleHistogram|styleNoLabel|styleOwnScale, 0, 60);
Plot(IIf(sigS !=sig, SSellSig, Null), "", ColFund, 		styleHistogram|styleNoLabel|styleOwnScale, 0, 60);

//	plot signal states in ribbon plots for tristate trading
Plot(IIf(sigS !=sig, IIf(LBuyC, 1, Null), Null), "", ColFund, 	styleArea|styleNoLabel|styleOwnScale, -2.5, 235);
Plot(IIf(sigS !=sig, IIf(SBuyC, 1, Null), Null), "", ColIndex, 	styleArea|styleNoLabel|styleOwnScale, -1, 250);

// create scaled signal tick marks for buy and hold chart (bottom layer of plots)
scaler	= Max(PMAx, 1.2*(Hi(Max(bh, result)) - 	Lo(Min(bh, result))  ))^.85;

Blt		= (LBuySig OR SSellSig)*(bh - 0.04*scaler);
Bst	= (LBuySig OR SSellSig)*(bh - 0.06*scaler);
Sst	= (SBuySig OR LSellSig)*(bh + 0.04*scaler);
Slt		= (SBuySig OR LSellSig)*(bh + 0.06*scaler);

bl		= IIf(bh >= baseline, Blt, Bst);
bm		= IIf(bh >= baseline, Bst, Blt);
sl		= IIf(bh >= baseline, Slt, Sst);
sm		= IIf(bh >= baseline, Sst, Slt);

Plot(bm, 	"", BGColr, 	styleThick|styleHistogram|styleNoLabel|styleOwnScale, LLP, ULP);	//	-11 is special color code for background
Plot(bl, 	"", ColTitle, 	styleThick|styleHistogram|styleNoLabel|styleOwnScale, LLP, ULP);
Plot(sm, 	"", BGColr, 	styleThick|styleHistogram|styleNoLabel|styleOwnScale, LLP, ULP);
Plot(sl, 	"", ColTitle, 	styleThick|styleHistogram|styleNoLabel|styleOwnScale, LLP, ULP);

//	Plot Sell period color
if (showCompareSignal)
{
	Plot(IIf(showSell, 1, Null), "", IIf(SellCnd, SellColr, BGColr), styleArea | styleNoLabel | styleOwnScale, LISP, UISP);
}


//	Title section
notLastBar 	= 	SelectedValue(BIn) != BarCount - 1;
pairname		= 	WriteIf(trades=="Long & Short", ec(colFund)+Name()+
								WriteIf(ShFund !="", ec(ColTitle)+" / "+ec(colIndex)+ShFund, sp(9))+
 								ec(ColTitle)+WriteIf(sigS !=sig, " / "+MMFnd, sp(2)+"( Long and Short )"),
					WriteIf(trades=="Long Trades Only", ec(colFund)+Name()+
								WriteIf(MMFnd !="", ec(ColTitle)+" / "+ec(ColTitle)+MMFnd, sp(9))+
								ec(ColTitle)+sp(5)+"( Long Only)    ",
					WriteIf(MMFnd !="", ec(ColTitle)+MMFnd+" / ", sp(11))+
								ec(colIndex)+Name()+
								ec(ColTitle)+sp(5)+"( Short Only)"));
signam		= 	WriteIf(sigsors != "", WriteIf(sigFrom=="FT", "FT ", WriteIf(sigFrom=="Ami", "Ami ", ""))+
					WriteIf( sigsors=="SList"  AND NOT nosig,
					"Sig # "+V0(signum), "Signal")+"  "+ec(ColDate)+
					WriteIf(sigS==sig, sig, WriteIf(trades=="Long Trades Only", sigL,
					WriteIf(trades=="Long & Short", sigL+" & "+sigS, sigS)))+
					WriteIf(sigS==sig, "", " ( tri-state )"), SigSelect+
					wi(SigSelect !="Compound Signal" AND SigSelect !="Multiple Signals", " Signal"));
Plotted		= 	0;	//	conditional spacing variable for the Title statement
HoldName	= 	WriteIf(tradeMin==1, "Min Trade Hold", "Min Buy Hold");
ColGain		= 	IIf(trades=="Long & Short", IIf(SelectedValue(LBuyC)==1, ColFund, IIf(SelectedValue(SBuyC)==1,
						ColIndex, ColTitle)), IIf(trades=="Long Trades Only", IIf(SelectedValue(LBuyC)==1,
						ColFund, ColTitle), IIf(SelectedValue(SBuyC)==1, ColIndex, ColTitle)));


Title 	= 	TitleDates(ColTitle, ColDate)+nl(1)+
			pairname+sp(5)+signam+
				sp(4)+WriteIf(delay==1, ec(colTitle), ec(ColWarn))+"Delay"+w0(delay)+
				wi(sigS==sig AND signum !=0 AND MinDays !=1, ec(ColWarn)+sp(4)+HoldName+w0(MinDays))+
				ec(colTitle)+sp(4)+"Sells / Yr"+w1(trs/yrs)+sp(2)+
			nl(1)+sp(8)+WriteIf(notLastBar , sp(12)+"At the pole on ", "On the last day shown, ")+
				ec(ColDate)+WriteVal(SelectedValue(DateTime()), formatDateTime )+ec(ColTitle)+", "+
				sp(4)+"\\c"+Col+"Trading Result"+ec(ColTitle)+w2(nlresult)+
				sp(4)+ec(ColBHT)+"Buy&Hold"+ec(ColTitle)+w2(nlbh)+
			nl(1)+sp(3)+ec(ColDate)+WriteVal(LastValue(ValueWhen(BIn==startbar, DateTime())),
				formatDateTime )+ec(ColTitle)+"  --->  "+ec(ColDate)+
				WriteVal(LastValue(ValueWhen(BIn==endbar, DateTime())), formatDateTime )+
				ec(colTitle)+"      ("+V0(Length)+" days)"+

			WriteIf(showStats,	//start of WriteIf XXX
			sp(10)+ec(ColTitle)+WriteIf(logPlot, "Logarithmic Plot", "  Linear Plot")+

			nl(1)+ec(ColTitle)+"Ann    = \\c"+Col+sp(NS(resAnnGn, 6))+WriteVal(resAnnGn, 1.2, 0) + " %   "+
				ec(ColBHT)+sp(NS(bhAnnGn, 6))+WriteVal(bhAnnGn, 1.2, 0) +" %  "+

			nl(1)+ec(ColTitle)+"Gain   = \\c"+Col+sp(NS(resGain, 6))+WriteVal(resGain, 1.2, 0) + " %   "+
				ec(ColBHT)+sp(NS(bhGain, 6))+WriteVal(bhGain, 1.2, 0) +" %  "+

			nl(1)+ec(ColTitle)+"MDD   = \\c"+Col+sp(NS(MDD, 6))+WriteVal(MDD, 1.2, 0) + " %   "+
				ec(ColBHT)+sp(NS(bhMDD, 6))+WriteVal(bhMDD, 1.2, 0) +" %  "+

			nl(1)+ec(ColTitle)+"UI       = \\c"+Col+sp(NS(resUI, 6))+WriteVal(resUI, 1.2, 0) + " %   "+
				ec(ColBHT)+sp(NS(bhUI, 6))+WriteVal(bhUI, 1.2, 0) +" %  "+

			nl(1)+ec(ColTitle)+"SD      = \\c"+Col+sp(NS(resStdDev, 6))+WriteVal(resStdDev, 1.2, 0) + " %   "+
				ec(ColBHT)+sp(NS(bhStdDev, 6))+WriteVal(bhStdDev, 1.2, 0) +" %  "+

			nl(1)+ec(ColTitle)+"Shrp    = \\c"+Col+sp(NS(resSharp, 6))+WriteVal(resSharp, 1.2, 0) + "       "+
				ec(ColBHT)+sp(NS(bhSharp, 6))+WriteVal(bhSharp, 1.2, 0) +"      "+

			nl(1)+ec(ColTitle)+"A / M   = \\c"+Col+sp(NS(Nz(resAOM), 6))+WriteVal(Nz(resAOM), 1.2, 0) + "       "+
				ec(ColBHT)+sp(NS(Nz(bhAOM), 6))+WriteVal(Nz(bhAOM), 1.2, 0) +"      "+

			nl(1)+ec(ColTitle)+"UPI      = \\c"+Col+sp(NS(resUPI, 6))+WriteVal(resUPI, 1.2, 0) + "       "+
				ec(ColBHT)+sp(NS(bhUPI, 6))+WriteVal(bhUPI, 1.2, 0) +"      "+

			nl(1)+ec(ColTitle)+"RRR    = \\c"+Col+sp(NS(resRRR, 6))+WriteVal(resRRR, 1.2, 0) + "       "+
				ec(ColBHT)+sp(NS(bhRRR, 6))+WriteVal(bhRRR, 1.2, 0) +"      " ,	// end of first part of WriteIf XXX

			sp(5)+ec(ColTitle)+"Ann = \\c"+Col+WriteVal(resAnnGn, 1.2, 0) + "%  "+
				ec(ColBHT)+WriteVal(bhAnnGn, 1.2, 0) +"%"+

			sp(5)+ec(ColTitle)+"A / M = \\c"+Col+WriteVal(Nz(resAOM), 1.2, 0)+sp(2)+
				ec(ColBHT)+WriteVal(Nz(bhAOM), 1.2, 0) +
				sp(5)+ec(ColTitle)+"RRR = \\c"+Col+WriteVal(Nz(resRRR), 1.2, 0)+sp(2)+nl(9))+	//	end of WriteIf XXX

			wi(showPoleGn,
				TitleGainSpaced(nlresult, "Trade"+" Close", ColGain, -1, ColDate)+wi(Plotted, "    Ctrl+UpArrow to hide this line")+
				TitleGainSpaced(nlbh, "B & H"+" Close", ColBHT, -1, ColDate)+wi(Plotted, "    Ctrl+UpArrow to hide this line"))+

			WriteIf(IndError, nl(2)+ec(ColWarn)+sp(5)+
				"The indicator did not exist on the pole date. Move the pole, change the indicator symbol,    "+
				nl(1)+sp(5)+"or correct the indicator symbol spelling, by first clicking the 'Reset all' button, and then  "+
				nl(1)+sp(5)+"re-typing the symbol, starting at the right end of the phrase, Indicator Symbol---    ",
			WriteIf(rulesError, nl(2)+ec(ColWarn)+sp(5)+
				"Buy/Sell rules are not properly defined. Check for the proper include file name (~ 1/4 down in code)."+
				nl(1)+sp(5)+"Also make sure that all the parameters defining the Buy and Sell signals are entered in the boxes"+
				nl(1)+sp(5)+"and that their values and the number of bars loaded or available are sufficient to create Buys/Sells.    ",
			WriteIf(nosig, nl(2)+ec(ColWarn)+sp(5)+
				"The signal file was not found - using B & H. Check the signal name spelling and for the "+
				nl(1)+sp(5)+"presence of the signal file in the AmiBroker database or in the FastTrack SIG directory. ",
			WriteIf(ShortError, nl(2)+ec(ColWarn)+sp(5)+
				"The short fund did not exist on the first day of the test. Change the start date,  "+
				nl(1)+sp(5)+"or correct the short fund symbol spelling, by first clicking the 'Reset all' button,  "+
				nl(1)+sp(5)+"and then re-typing the symbol, starting at the end of the phrase, Short Fund---    ",
			WriteIf(MMError, nl(2)+ec(ColWarn)+sp(5)+
				"The money market did not exist on the first day of the test.  Change the start date,  "+
				nl(1)+sp(5)+"or correct the money market symbol spelling, by first clicking the 'Reset all' button,  "+
				nl(1)+sp(5)+"and then re-typing the symbol, starting at the right end of the phrase, MM Fund---    ",
			WriteIf(ZZError, nl(2)+ec(ColWarn)+sp(5)+
				"The ZigZag fund (for the indicator comparison signal) did not exist on the first day of the test.    "+
				nl(1)+sp(5)+"Change the start date, click the parameter to hide the comparison signal, or correct the   "+
				nl(1)+sp(5)+"ZigZag fund symbol spelling, by first clicking the 'Reset all' button, and then re-typing    "+
				nl(1)+sp(5)+"the symbol, starting at the right end of the phrase, ZigZag Fund---    ", nl(1)))))))+	
			WriteIf(ErrorNote, nl(2)+sp(20)+ec(ColWarn)+"The end Date, "+
				ec(ColDate)+WriteVal(LastValue(ValueWhen(BIn==endbar, DateTime())), formatDateTime )+
 				ec(ColFund)+", must be later than the start Date, "+ec(ColDate)+
				WriteVal(LastValue(ValueWhen(BIn==startbar, DateTime())), formatDateTime ),
				wi(sigsors !="", nl(6) )+wi(NOT plotted OR NOT showPoleGn, nl(2)))+

			ec(ColTitle)+nl(DDSpacing - 2)+WriteIf(LT !=0,WriteIf(LT==1, "Trade DrawDown",
				"Total DrawDown")+w2(Loss)+" %", nl(TGSpacing)+"Trade Gain or Loss"+w2(Loss)+" %")+
			WriteIf(notLastBar , "   (At the pole)", "   (On the last day shown)")+

			WriteIf(LT !=0, nl(IndSpacing), nl(IndSpacing - TGSpacing))+sp(0)+
							wi(Name1 !="", ec(colInd1)+Name1+sp(4) )+
							wi(Name2 !="", ec(colInd2)+Name2+sp(4) )+
							wi(Name3 !="", ec(colInd3)+Name3+sp(4) )+
							wi(Name4 !="", ec(colInd4)+Name4+sp(4) )+
							wi(Name5 !="", ec(colInd5)+Name5+sp(4) )+
							wi(Name6 !="", ec(colInd6)+Name6+sp(4) )+
							wi(Name7 !="", ec(colInd7)+Name7+sp(4) )+
							wi(Name8 !="", ec(colInd8)+Name8+sp(4) )+

			wi(showSell AND showCompareSignal, sp(10)+ec(colorGreen)+"Green areas are "+
				WriteIf(useIdeal, IdealSym+" "+percent+"% Zig Sells", refSig+" Sells")+" ( for reference )")+

			wi(showExtraTitles, nl(0)+ec(colTitle)+extraTitle1+nl(SRTitleSpace)+ec(colTitle)+extraTitle2)+

			nl(SigSpacing)+sp(68)+WriteIf(LBuySig, ec(ColFund)+"Buy  "+Date(),
				WriteIf(SBuySig AND sigS !=sig, ec(colIndex)+"Short  "+Date(),
				WriteIf(LSellSig, ec(ColIndex)+"Sell  "+Date(),
				WriteIf(SSellSig AND sigS !=sig, ec(ColFund)+"Cover  "+Date(), ""))))+nl(0)+

			"";
}


//	make a configuration file to store params
Paramslist = ""+
	sigsel+","+
	dayt+","+
	delay+","+
	p3+","+
	tradeMin+","+
	MinDays+","+
	ShFund+","+
	tradetype+","+
	MMFund+","+
	MaxPrice+","+
	LossTyp	+","+
	DDMax	+","+
	logPlot+","+
	p13+","+
	showBH+","+
	showStats+","+
	showPoleGn+","+
	riskfree+","+
	showSell+","+
	useIdeal	+","+
	refSig+","+
	IdealSym+","+
	percent+","+
	p23+","+
	p24+","+
	BGCol+","+
	DDSpace+","+
	IndSpace+","+
	SigSpace+","+
	ArrowSpace	+","+
	TGSpace+","+
	UpPerPrc+","+
	LowPerPrc+","+
	UpPerDD+","+
	LowPerDD+","+
	UpPerTG+","+
	LowPerTG+","+
	UpPerIn+","+
	LowPerIn+","+
	"";


fh 	= fopen( ParamsFileName, "w");
if( fh )
{
   	fputs(Paramslist, fh);
	fclose( fh );
}


//	make a checkfile to facilitate editing the "String Extract" code that retrieves the param values
_SECTION_BEGIN("PARAMETER CHECK FILE");
checkFile		= ParamTrigger("Make a Parameter Check File?", "Click here to Make a Parameter Check File");
if (CheckFile )
{
	CheckString	= ""+

		"0	sigsel		"+sigsel+"\n"+
		"1	dayt		"+dayt+"\n"+
		"2	delay		"+delay+"\n"+
		"3	p3			"+p3	+"\n"+
		"4	tradeMin	"+tradeMin+"\n"+
		"5	MinDays		"+MinDays+"\n"+
		"5	ShFund		"+ShFund+"\n"+
		"7	tradetype	"+tradetype+"\n"+
		"8	MMFund		"+MMFund+"\n"+
		"9	MaxPrice	"+MaxPrice+"\n"+
		"10	LossTyp		"+LossTyp+"\n"+
		"11	DDMax		"+DDMax	+"\n"+
		"12	logPlot		"+logPlot+"\n"+
		"13	p13		"+p13+"\n"+
		"14	showBH		"+showBH+"\n"+
		"15	showStats	"+showStats+"\n"+
		"16	showPoleGn	"+showPoleGn+"\n"+
		"17	riskfree	"+riskfree+"\n"+
		"18	showSell	"+showSell+"\n"+
		"19	useIdeal	"+useIdeal+"\n"+
		"20	refSig		"+refSig+"\n"+
		"21	IdealSym	"+IdealSym+"\n"+
		"22	percent		"+percent+"\n"+
		"23	p23		"+"unused"+"\n"+
		"24	p24		"+p24+"\n"+
		"25	BGCol		"+BGCol+"\n"+
		"26	DDSpace		"+DDSpace+"\n"+
		"27 	IndSpace	"+IndSpace+"\n"+
		"28 	SigSpace	"+SigSpace+"\n"+
		"29 	ArrowSpace	"+ArrowSpace+"\n"+
		"30	TGSpace		"+TGSpace+"\n"+
		"31	UpPerPrc	"+UpPerPrc+"\n"+
		"32	LowPerPrc	"+LowPerPrc+"\n"+
		"33	UpPerDD		"+UpPerDD+"\n"+
		"34	LowPerDD	"+LowPerDD+"\n"+
		"35	UpPerTG		"+UpPerTG+"\n"+
		"36	LowPerTG	"+LowPerTG+"\n"+
		"37	UpPerIn		"+UpPerIn+"\n"+
		"38	LowPerIn	"+LowPerIn+"\n"+
		"";

	fh 	= fopen( ParamsCheckFile, "w");
	if( fh )
	{
	   	fputs(CheckString, fh);
		fclose( fh );
	}
}
_SECTION_END();


_SECTION_BEGIN("RESET ALL TO DEFAULTS");
//	delete the config file so all params can be restored to defaults
erase			= ParamTrigger("Delete Config File? (All customization will be lost)", "Click to delete Config File - then click 'Reset all'");
_SECTION_END();

if (erase)
{
	fdelete(ParamsFileName);
	if			(sigSelect=="Multiple Signals") 	{	fdelete(MSParamsFileName);	}
	else if 	(sigSelect=="Compound Signal") 	{	fdelete(CSParamsFileName);	}
}




//	make an initiation file to store colors
ColorsList = ""+
	ColFund+","+
	ColIndex+","+
	ColBH+","+
	ColTitle+","+
	ColBHT+","+
	ColDate+","+
	ColWarn+","+
	ColInd1+","+
	ColInd2+","+
	ColInd3+","+
	ColInd4+","+
	ColInd5+","+
	ColInd6+","+
	ColInd7+","+
	ColInd8+","+
	"";


fh 	= fopen( ColorsFileName, "w");
if( fh )
{
   	fputs(ColorsList, fh);
	fclose( fh );
}


//	delete the color config file so all colors can be restored to defaults for selected background color
if (ChangeCol OR erase)	{	fdelete(ColorsFileName);		}

}
}
}