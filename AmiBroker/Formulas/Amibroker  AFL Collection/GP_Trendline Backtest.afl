/*
        Trend line backtest system


        This performs a backtest using the trend line plotting algorithm.
        Buys are generated by a price break above a downward-sloping trend
        line, governed by the peak/trough and close above parameters. Sells
        are generated during a subsequent down-trend by prices falling
        below the upward-sloping trend line that triggered the buy.

        If a sell has been indicated but a subsequent trend line calculation
        removes the current downward-sloping trend line and goes back to the
        previous upward-sloping one, that day will also be signalled as a buy.
        This can happen where falling prices turn the detection EMA downward,
        creating a final downward-sloping trend line, but then turn up again
        and cause the previous upward-sloping trend line to be extended to
        the new position. This happens because the decision of whether to
        start with an upward-sloping or downward-sloping trend line is made
        based solely on the slope of the EMA on the last day being tested.

        From preliminary testing, this trend line algorithm seems more suited
        to less-volatile stocks taken over the longer term. Using the ASX200
        stocks as a universe, best results so far have been obtained with
        peak/trough change = 20, close above = 3, and test EMA period = 30.
        It is relatively sensitive to changes in the peak/trough value, less
        so to changes in the close above value, and very insensitive to
        changes in the test EMA period.

        Due to the iterative nature of the line fitting algorithms, this
        back test runs fairly slowly, even though the bulk of it is in a
        plugin DLL. The larger the peak/trough change parameter, the slower
        it tends to run. For the ASX200 universe with the parameters
        mentioned above, my 1.8GHz Centrino notebook running XP Pro with
        1GB of RAM takes a few minutes to do one back test pass.

        To install this script:

          - Place this file in the AmiBroker AFL folder
          - Open the Automatic Analysis window
          - Select Load and then select this file

        Note: I have a separate folder under the AFL folder called "Backtests"
              for storing back test and exploration AFL files, to keep them
              separate from the indicator files.
        
        To use in Automatic Analysis window:

          - Select Applies To (eg. Watchlist containing ASX200 stocks)
          - Set Range using from/to dates
          - Set Parameters
          - Select Back Test
          - Wait...

        You can also run this script as a Scan to list all buy and sell
        signals during the selected period, whether they'd be chosen by the
        back test or not.

        Note: these instructions apply to AmiBroker 4.60. There are slight
              differences with later versions.
        
		Last change: WS 20/07/2005 8:32:56 PM
*/                                                                        

GP_tlineUp1[0] = 0;            //  Parameters required by plugin DLL
GP_tlineUp2[0] = 0;
GP_tlineDown1[0] = 0;
GP_tlineDown2[0] = 0;
GP_closeAbove[0] = 0;
GP_aboveIx = -1;
GP_yover = -1;
GP_recentPeak = -1;
GP_changeAtr[0] = 0;

//==========================================================================


//  Set current working capital and other values here ....

TotalCapital = 100000;              //  Total capital to play with
SetOption("InitialEquity", TotalCapital);

Capital = 20000;                    //  Maximum value per purchase
MaxShares = 200000;                 //  Maximum shares per purchase
MaxPrice = 100;                     //  Maximum price per share
VolPerc = 0.25;                     //  Maximum fraction of EMA(Volume, 100)

//==========================================================================

tchg = Param("1. Peak/Trough Change? (%)", 20, 1, 200, 1);
closeOver = Param("2. Close Above? (%)", 3, 0, 50, 1);
endEma = Param("3. Test EMA Period?", 30, 2, 100, 1);

Bottom = IIf(Close < Open, Close, Open);    //  Bottom of open/close array
Top = IIf(Close > Open, Close, Open);       //  Top of open/close array


//  Build up trend line result array ...

GP_changeAtr = 1+5*(ATR(3)/Close);

for (i = 0; i < BarCount; i++) {
    res[i] = 0;
    sl[i] = 0;
    score[i] = 0;
    }

lastAboveIx = -1;
lastAboveFit = -1;
buyIx = -1;
didSell = 0;

for (z = 30; z < BarCount; z++) {               //  Ignore first 30 days
    emaPer = endEma*GP_changeAtr[z];
    eend = EMA(Close, emaPer);
    rs = LinRegSlope(eend, 2);
    isUp = rs[z] >= 0;                          //  Start with up or down?
    if (isUp) {
        startIx = z;
        fit = GP_DrawTrendLines(Bottom, Top, 2, startIx, 0, tchg, 0, closeOver, 0, isUp, Prefs(24));
        if (didSell) {
            didSell = 0;
            if (GP_aboveIx >= 0 AND GP_aboveIx == lastAboveIx AND lastAboveFit > 0)
                fit = lastAboveFit;             //  Just to force another buy
            else
                lastAboveIx = -1;
            }
        if (fit >= 0 AND GP_aboveIx >= 0) {
            lastAboveFit = fit;
            lastAboveIx = GP_aboveIx;
            res[z] = 1;
            buyIx = z;
            if (GP_aboveIx < BarCount AND GP_yover > 0) {
                fit = 1/(1+100*fit);
                score[z] = (100*((Close[GP_aboveIx]-GP_yover)/GP_yover)) + fit;
                }
            else
                score[z] = 0;
            }
        }
    else {
        if (buyIx >= 0) {
            startIx = z;
            if (GP_recentPeak < 0)
                GP_recentPeak = lastAboveIx;
            if (GP_recentPeak > z)
                GP_recentPeak = z;
            oshoot = z - GP_recentPeak + 1;
            GP_DrawTrendLines(Bottom, Top, 2, startIx, 0, tchg, oshoot, closeOver, 0, isUp, Prefs(24));
            if (GP_tlineDown1[z] < GP_tlineUp1[z]) {
                didSell = 1;
                buyIx = -1;
                sl[z] = 1;
                }
            }
        }
    }

evol = EMA(Volume, 100);

buyQty = Capital / BuyPrice;
volEma = evol * VolPerc;
pq = IIf(buyQty <= volEma, buyQty, volEma);
pq = IIf(pq < MaxShares, pq, MaxShares);
bq = pq * BuyPrice;
PositionSize = IIf(bq >= 3000 AND BuyPrice <= MaxPrice, bq, 0);
PositionScore = score;

Buy = IIf(PositionSize > 0, res, 0);
Sell = sl;

//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
