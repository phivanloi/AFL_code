//		util1x.afl by Bill Barnard, 2/10/06

//Version(4.72);		//	requires at least this version of Amibroker

/*

Index of Utility Functions and Procedures

Section 1 - Functions and Procedures to be used in Title Statements

	1. 		w0(), w1(), w2(), etc. - Shorthand call for WriteVal() with various numbers of decimal points (preceded by an "=")
	2. 		v0(), v1(), v2(), etc. - Shorthand call for WriteVal() with various numbers of decimal points
	3. 		wi() - writes Title string if condition is positive, otherwise nothing
	4. 		ec() - provides a shorthand for the EncodeColor function
	5. 		sp() - creates a string of spaces for a title statement
	6. 		removeSpaces()  - 	removes spaces from a string
	7. 		nl() - creates a string of newline characters for a title statement
	8. 		removeNLs() - removes newline characters from a string
	9. 		StrReplace() - replaces each instance of of one substring with another substring
	10.	pad() - creates a string of spaces to add to a name (of length 2 - 9 char) so that the overall width of the name
				plus spaces is pretty much a constant, allowing the next entry to be a set spot, similar to the Tab function
	11.	DateNumToStr() - converts a DateNum value to a string for use in a title - uses '-' as separator
	12.	DateToDateNum() - converts a date to DateNum
	13.	NS() - determines the number of spaces  to add before a number
				to make a series of numbers line up for a table-like Title output
	14.	TitleDates() - makes a title statement showing dates and stats about days shown
	15.	TitleGainSpaced() - makes a Title statement showing the gain from/to the dotted line (RangeMarkBegin)
				Only displays if RangeMarkBegin is set. Name and value are spaced for table formatting.

Section 2 - Miscellaneous Functions and Procedures

	1.		BuyMinHold() - causes a continuation of a buy for at least a specified period
	2. 		MinHold() - causes continuation of both buys and sells  for at least a specified period
	3. 		Stretch() - forces a minimum of stDays between Buys and Sells
	4. 		FTGetDrive() - determines the FastTrack drive letter
	5. 		FindFTDrive() - determines the drive on which FT is located, and resolves situation if there are more than one
	6. 		Till3() - the Tillson moving average (typically uses a factor of 0.7)
	7. 		MovAve() - faciltates switching average types with a parameter
	8. 		Fib() - generates Fibonacci numbers by an approximation method
	9. 		Lo() - provides lowest value in visible chart
	10. 	Hi() - provides highest value in visible chart


Section 3 - Functions for styleOwnScale Plots

	1. 		L1(), L3(), L4(), etc, -  calcululate lower limits for styleOwnScale
	2. 		U1(), U3(), U4(), etc. - calcululate upper limits for styleOwnScale

*/


//	ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
// 		Secton 1 - Functions and Procedures to be used in Title Statements
//	ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo


/*	The following provide the value of a variable for a Title output.
	Typical statement is:  "variable name"+w1(variable)+	*/

function w0(variable)
{
  	txt	= " = "+WriteVal(variable, 1.0);
  	return txt;
}

function w1(variable)
{
  	txt	= " = "+WriteVal(variable, 1.1);
  	return txt;
}

function w2(variable)
{
  	txt	= " = "+WriteVal(variable, 1.2);
  	return txt;
}

function w3(variable)
{
  	txt	= " = "+WriteVal(variable, 1.3);
  	return txt;
}

/* The following provide the value of a variable for a Title output.
	This just provides a shorthand for WriteVal(xxxx, 1.x).
	Typical statement is:  "variable name = "+v1(variable)+	*/

function v0(variable)
{
  	txt	= WriteVal(variable, 1.0);
  	return txt;
}

function v1(variable)
{
  	txt	= WriteVal(variable, 1.1);
  	return txt;
}

function v2(variable)
{
  	txt	= WriteVal(variable, 1.2);
  	return txt;
}

// 	Writes Title_String if Condition is positive, otherwise nothing
//	Provides a shorthand for the WriteIf function when it should be either on or off
function wi(Condition, Title_String)
{
	string		= WriteIf(Condition, Title_String, "");
	return string;
}


//	provides a shorthand for the EncodeColor function
function ec(Color_name)
{
	txt	= EncodeColor(Color_name);
	return txt;
}


//	Creates a string of spaces for a title statement
function sp(number_of_spaces)
{
  	TitleLine	= "";
	i				= 0;
	while (i < number_of_spaces)
	{
		TitleLine = TitleLine + " ";
		i = i+1;
	}
  	return TitleLine;
}

//	Removes spaces from a string
function removeSpaces( strng )
{
	while (StrFind(strng, " ") )
	{
	  	strng = StrLeft(strng, StrFind(strng, " ") - 1) + StrMid(strng, StrFind(strng, " "), 1000) ;
    	}
	return strng;
}

//	Creates a string of newline characters for a title statement
function nl(number_of_newlines)
{
  	TitleLine	= "";
	i				= 0;
	while (i < number_of_newlines)
	{
		TitleLine = TitleLine + "\n";
		i = i+1;
	}
  	return TitleLine;
}


//	Removes newline characters from a string
function removeNLs( strng )
{
	while (StrFind(strng, "\n") )
	{
	  	strng = StrLeft(strng, StrFind(strng, "\n") - 1) +
	  				StrMid(strng, StrFind(strng, "\n"), 1000) ;
     }
	return strng;
}


//	Replaces each instance of of the first substring with the second substring
function StrReplace( strng, first_substring,  second_substring)
{
	while (StrFind(strng, first_substring) )
	{
	  	strng = StrLeft(strng, StrFind(strng, first_substring) - 1) + second_substring+ StrMid(strng, StrFind(strng, first_substring)+StrLen(first_substring) - 1, 10000) ;
    	}
	return strng;
}


//	creates a string of spaces to add to a name (of length 2 - 9 char) so that the overall width of the name
//	plus spaces is pretty much a constant, allowing the next entry to be a set spot, similar to the Tab function
function pad(identifier)
{
  	num		= 2*(10 - StrLen(identifier)) + IIf(StrLen(identifier) > 5, 10 - StrLen(identifier), 9 - StrLen(identifier));
	spaces	= sp(num + IIf(StrFind(StrToUpper (identifier), "I") !=0, 1, 0));
	return	 spaces;
}


//	Converts a DateNum value to a string for use in a title - uses '-' as separator
function DateNumToStr(DtNum)
{
  	DayNm = round(frac(DtNum/100)*100);
  	MthNm = round(frac(DtNum/10000)*100);
  	YrNm = int(DtNum/10000)+1900;
  	return StrRight(NumToStr(MthNm+100, 1.0), 2)+"-"+
  				StrRight(NumToStr(DayNm+100, 1.0), 2)+"-"+
  				StrRight(NumToStr(YrNm, 1.0), 2);
}

//	Converts a date to DateNum. dat is the date in mm/dd/yyyy format (enclose in quotes)
function DateToDateNum(dat)
{
  	firstbreak	= StrFind(dat, "/");
  	mont			= StrToNum(StrLeft(StrLeft(dat, firstbreak)   , firstbreak - 1));
  	fragment		= StrRight(dat, StrLen(dat) - firstbreak);
  	secbreak		= StrFind(fragment, "/");
	daa			= StrToNum(StrLeft(StrLeft(fragment, secbreak)   , secbreak - 1));
  	yeer			= StrToNum(StrRight(fragment, StrLen(fragment) - secbreak));
  	yerr			= IIf(yeer <= 99 AND yeer > 25, yeer + 1900, IIf(yeer <= 25, yeer + 2000, yeer));
  	DatNum		= (yerr - 1900)*10000 + mont*100 + daa;
  	return DatNum;
}

//	Determines the number of spaces  to add before a number
//	to make a series of numbers line up for a table-like Title output
function NS(number, digits_of_largest_number)
{
	neg			= IIf(number < 0, 1, 0);
	number		= abs(number);
	digits			= IIf(number < 1, 1, floor(log10(number)) + 1);
	totalChar	= digits + 2;
	diff			= digits_of_largest_number - totalChar;
	spaces 		= IIf(diff > 3, 5, IIf(diff > 2, 4, IIf(diff > 1, 2, IIf(diff > 0, 1, 0))));
	spaces		= spaces - neg;
	return spaces;
}


//	Makes a title statement showing dates and stats about days shown
function TitleDates(TitleColor, DateColor)
{
	vis				= Status("barvisible");
	startMark		= IIf(BarIndex()!=0, vis - Ref( vis, -1 ), 1);
	endMark		= IIf(DateNum()!=LastValue(DateNum()),vis - Ref( vis, 1 ),
									Ref( vis, - LastValue(BarsSince(startMark))));

	startnum		= IIf(Cum(vis)==Cum(1), ValueWhen(BarIndex()==0, DateNum()),
									ValueWhen(startMark, DateNum()));
	startDate		= DateNumToStr(startnum);
	endnum 		= LastValue(ValueWhen(endMark, DateNum()));
	endDate		= DateNumToStr(endnum);
	poleDate		= DateNumToStr(DateNum());

	toPole			= SelectedValue(BarIndex()) - ValueWhen(startmark, BarIndex());
	fromPole		= LastValue(ValueWhen(endMark, BarIndex())) - SelectedValue(BarIndex());
	TotBars		= LastValue(ValueWhen(endMark, BarIndex())) - ValueWhen(startmark, BarIndex());

	TitleLine		=
						"\\c"+DateColor+startDate + "     \\c"+TitleColor+"Pole - \\c"+DateColor+poleDate+
						"       \\c"+TitleColor+"Days:  to Pole"+w0(toPole)+
						"    from Pole "+w0(fromPole)+
						"    Total"+w0(TotBars) +
						"      \\c"+DateColor + endDate+sp(1);//
	return TitleLine;
}

//	Makes a Title statement showing the gain from/to the dotted line (RangeMarkBegin)
//	Only displays if RangeMarkBegin is set. Name and value are spaced for table formatting)
function TitleGainSpaced(Variable, VariableName, ColName, ColTitle, ColDate)
{
    	global Plotted;
	GainF 			= 100*(BeginValue( Variable) - SelectedValue( Variable))/SelectedValue( Variable);
	GainR 			= 100*(SelectedValue( Variable) - BeginValue( Variable))/BeginValue( Variable);
	Gain			= IIf(DateNum() < BeginValue(DateNum()), GainF, GainR);

	selDateNum	= SelectedValue(DateNum());
	stDateNum	= BeginValue(DateNum());
	firstDN			= Min(selDateNum, stDateNum);
	secDN			= Max(selDateNum, stDateNum);

	numdays		= abs(SelectedValue(BarIndex()) - BeginValue(BarIndex()));

	mark			= IIf(BarIndex()==BeginValue(BarIndex()), 1, 0);

	TitleLine 		= "";
	Plotted		= 0;
	if (BeginValue(BarIndex()) !=0)
	{
		Plot(mark, "", ColDate, styleNoLabel | styleHistogram | styleDashed | styleOwnScale, 0, 1);
		TitleLine	= 	nl(1)+sp( 2*(11 - StrLen(VariableName)))+
						ec(ColName)+VariableName+ec(ColTitle)+" = "+sp(NS(SelectedValue(Variable), 7))+WriteVal(Variable, 1.3, 0)+
						sp(3)+ec(ColDate)+DateNumToStr(firstDN)+" ---> "+DateNumToStr(secDN)+
						", "+v0(numdays)+" days,"+sp(2)+ec(ColName)+"gain"+ec(ColTitle)+sp(NS(SelectedValue(gain), 5))+WriteVal(SelectedValue(gain), 1.2, 0)+" %";
		Plotted	= 1;
	}
	return TitleLine;
}


//	ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
// 		Secton 2 - Miscellaneous Functions and Procedures
//	ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo


//	The BuyMinHold procedure causes a continuation of a buy for at least a specified period
procedure BuyMinHold(startbar, MinDays)	//	startbar is the first day of the trading period
{
	global Buy;
	global Sell;

	BC		= Flip(Buy, Sell);

	k		= 0;

	if (BC[startbar]==1)
	{
		for (k = 1; k< MinDays AND k+startbar  < BarCount -1; k++)
		{
			 BC[startbar+k]	= 1;
			 SC[startbar+k]	= 0;
		}
	}

	for (i=startbar+k+1; i< BarCount -1; i++)
	{
		if (BC[i]==1 AND BC[i-1]==0)
		{
			for (j = 1; j < MinDays AND j + i < BarCount -1; j++)
			{
				BC[i+j]	= 1;
			}
			i	= i + j;
		}
	}

	SC	= NOT BC;
	Buy	= ExRem(BC, SC);
	Sell	= ExRem(SC, BC);
}


//	The MinHold procedure causes continuation of  buys and sells  for at least a specified period
procedure MinHold(startbar, MinDays)	//	startbar is the first day of the trading period
{
	global Buy;
	global Sell;

	BC		= Flip(Buy, Sell);
	SC		= NOT(BC);

	if (BC[startbar]==1)
	{
		for (k = 1; k< MinDays AND k+startbar < BarCount -1; k++)
		{
			BC[startbar+k]	= 1;
			SC[startbar+k]	= 0;
		}
	}
	else
	{
		for (k = 1; k< MinDays AND k+startbar < BarCount -1; k++)
		{
			BC[startbar+k]	= 0;
			SC[startbar+k]	= 1;
		}
	}

	for (i=startbar+k+0; i< BarCount -1; i++)
	{
		if (BC[i]==1 AND BC[i-1]==0)
		{
			for (j = 1; j < MinDays AND j + i < BarCount -1; j++)
			{
				BC[i+j]	= 1;
				SC[i+j]	= 0;
			}
			i	= i + j - 1;
		}
		else if (SC[i]==1 AND SC[i-1]==0)
		{
			for (j = 1; j < MinDays AND j + i < BarCount -1; j++)
			{
				BC[i+j]	= 0;
				SC[i+j]	= 1;
			}
			i	= i + j - 1;
		}
	}

	Buy	= ExRem(BC, SC);
	Sell	= ExRem(SC, BC);
}


//	The stretch procedure forces a minimum of stDays between Buys and Sells
procedure Stretch(stDays)
{
	global Buy;
	global Sell;

	// make every bar either a buy condition (state) or sell condition
	n	= 0;
	while (Buy[n]==0 AND Sell[n]==0 AND n < BarCount - 1)	{n = n + 1; }
	if (Buy[n]==1)
	{
		Bs	= Flip(Buy, Sell);
		Ss 	= NOT Bs;
	}
	else
	{
		Ss = Flip(Sell, Buy);
		Bs = NOT Ss;
	}

	Be	= ExRem(Bs, Ss);
	Se	= ExRem(Ss, Bs);

	for (i=0; i< BarCount-1; i++)
	{
		if ((Be[i]==1 AND (Be[Max(i-1, 0)] !=1 OR (i==0 AND n==0))) OR
			(Se[i]==1 AND (Se[Max(i-1, 0)] !=1 OR (i==0 AND n==0))) )
		{
			for (j=1; j<stDays AND (i+j)<BarCount-1; j++)
	  		{
				Be[i+j] = Be[i];
				Se[i+j] = Se[i];
			}
			if (Be[i+j-1]==1)
			{
				Se[i+j]	= IIf(Ss[i+j]==1, 1, 0);
			}
			else
			{
				if (Se[i+j-1]==1)
				{
					Be[i+j]	= IIf(Bs[i+j]==1, 1, 0);
				}
			}
			i	= i+j-1;
		}
	}
	Buy 	= ExRem(Be, Se);
	Sell	= ExRem(Se, Be);
}


//	function to determine the FastTrack drive letter
EnableScript("vbscript");
<%

Set fso = CreateObject("Scripting.FileSystemObject")

Drive = ""

if fso.FolderExists( "C:\FT" ) then
	Drive = Drive + "C:"
end if
if fso.FolderExists( "D:\FT" ) then
	Drive = Drive + "D:"
end if
if fso.FolderExists( "E:\FT" ) then
	Drive = Drive + "E:"
end if
if fso.FolderExists( "F:\FT" ) then
	Drive = Drive + "F:"
end if
if fso.FolderExists( "G:\FT" ) then
	Drive = Drive + "G:"
end if
if fso.FolderExists( "H:\FT" ) then
	Drive = Drive + "H:"
end if
if fso.FolderExists( "I:\FT" ) then
	Drive = Drive + "I:"
end if
if fso.FolderExists( "J:\FT" ) then
	Drive = Drive + "J:"
end if

function FTGetDrive()
	FTGetDrive = Drive
end function
%>


//	determine the drive on which FT is located, and resolve situation if there are more than one
function FindFTDrive()
{
global ErrText;

FTDOK	= 0;
FTD	= WriteIf(StaticVarGetText("FastTrackDrive") != "", StaticVarGetText("FastTrackDrive"), "X") ;

if (FTD != "C:" AND FTD != "D:" AND FTD != "E:" AND FTD != "F:" AND
	FTD != "G:" AND FTD != "H:" AND FTD != "I:" AND FTD != "J:" AND FTD !="none")
{
	//	retrieve stored FT drive information, if available
	FTDrive 				= "";
	FTDriveFileName	= "ConfigFiles\\FTDrive.bf";

	fh 				= fopen( FTDriveFileName, "r");
	if( fh )
	{
   		while( ! feof( fh ) )
   		{
      		FTDrive = fgets( fh );
   		}
		fclose( fh );
	}

	if (FTDrive != "C:" AND FTDrive != "D:" AND FTDrive != "E:" AND FTDrive != "F:" AND
		FTDrive != "G:" AND FTDrive != "H:" AND FTDrive != "I:" AND FTDrive != "J:" )

	{
		script        	= GetScriptObject();
		ftdrivevar   = script.Drive;
		FTDrive		= script.FTGetDrive();
		FTDrive		= WriteIf(FTDrive=="", "none", FTDrive);
	}

	if 	( StrLen( FTDrive ) > 2 AND FTDrive !="none")
	{
		_SECTION_BEGIN("FastTrack Drive Letter");
		FTDrive	= ParamStr("Type your Active FastTrack Drive Letter  ----->", "");
		_SECTION_END();

		ErrText	= 	nl(3)+ec(32)+sp(10)+  	"More than one FT directory was found on your computer."+
						nl(2)+ec(32)+sp(10)+	"Please determine which one is your active directory and "+
						nl(2)+ec(32)+sp(10)+	"then zoom out to show all data (Menu: View, Zoom, All)"+
						nl(2)+ec(32)+sp(10)+	"then right-click on the chart and select 'Parameters'. As "+
						nl(2)+ec(32)+sp(10)+	"always, on the first use of a formula's Parameter window,"+
						nl(2)+ec(32)+sp(10)+	"click on the button 'Reset all' to set the order of Params."+
						nl(2)+ec(32)+sp(10)+	"type the drive letter  (a capital letter followed by a colon, "+
						nl(2)+ec(32)+sp(10)+	"like C: or D:)  into the Param box. Then click   'Reset all'.";
	}
	else FTDOK = 1;

	StaticVarSetText("FastTrackDrive",  FTDrive);

	//	make an initiation file to store the FT drive letter
	fh = fopen( FTDriveFileName, "w");
	if( fh )
	{
   		fputs(FTDrive, fh);
		fclose( fh );
	}
}
else FTDOK = 1;

return FTDOK;
}

//	the Till3 average typically uses a factor of 0.7
function Till3(Variable, period, factor)
{
	e1=EMA(Variable,Period);
	e2=EMA(e1,Period);
	e3=EMA(e2,Period);
	e4=EMA(e3,Period);
	e5=EMA(e4,Period);
	e6=EMA(e5,Period);

	c1=-factor^3;
	c2=3*factor^2+3*factor^3;
	c3=-6*factor^2-3*factor-3*factor^3;
	c4=1+3*factor+factor^3+3*factor^2;
	result=c1*e6+c2*e5+c3*e4+c4*e3;
	return result;
}


//	the following faciltates switching average types with a parameter
function MovAve(Type, Variable, Period)
{
	ave	= 	IIf(Type=="MA", 		MA(	Variable, Period),
				IIf(Type=="EMA", 	EMA(	Variable, Period),
				IIf(Type=="DEMA", 	DEMA(Variable, Period),
				IIf(Type=="TEMA", 	TEMA(Variable, Period),
				IIf(Type=="WMA", 	WMA(	Variable, Period),
				IIf(Type=="Till3", 		Till3(	Variable, Period, 0.7),
											Null))))));
	return ave;
}

/*
//	generates Fibonacci numbers
function Fib(number)
{
  	fibNum	= 	IIf(number==0, 0, IIf(number==1, 1, IIf(number==2, 1,
  					IIf(number==3, 2, IIf(number==4, 3, IIf(number==5, 5,
  					IIf(number==6, 8, IIf(number==7, 13, IIf(number==8, 21,
  					IIf(number==9, 34, IIf(number==10, 55, IIf(number==11, 89,
  					IIf(number==12, 144, IIf(number==13, 233,  377))))))))))))));
  	return fibNum;
}
*/

//	generates Fibonacci numbers by an approximation method
function Fib(number)
{
  	number 	= Min(number, 15);
  	fibNum	= round(1.618034^number / 2.236068);
  	return fibNum;
}


// Provides lowest value in visible chart
function Lo (Var)
{
	vis = Status("barvisible");
	//Hii = LastValue(Highest(Var*vis));
	//Loo = LastValue(Lowest((Var - Hii)*vis) + Hii);
	return vis;//Loo;
}


// Provides highest value in visible chart
function Hi (Var)
{
	vis = Status("barvisible");
	Hii = LastValue(Highest(Var*vis));
	return Hii;
}


//	ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
// 		Secton 3 - Functions to provide Scaling for StyleOwnScale plots
//	ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo


// Lower limit for plotting one variable
function L1 (Var, LowerFreespacePercent, UpperFreespacePercent)
{
	vis = Status("barvisible");
	Hii = LastValue(Highest(Var*vis));
	Loo = LastValue(Lowest((Var - Hii)*vis) + Hii);
	range = Hii - Loo;
	rangePercent = 100 - LowerFreespacePercent - UpperFreespacePercent;
	mult = range / rangePercent;
	result = Loo - mult*LowerFreespacePercent;
	return result;
}

// Lower limit for plotting three variables
function L3 (Var1, Var2, Var3, LowerFreespacePercent, UpperFreespacePercent)
{
	vis = Status("barvisible");
	Hii		= Max(LastValue(Highest(Var3*vis)), Max(LastValue(Highest(Var2*vis)),
				LastValue(Highest(Var1*vis))));
	Loo	= Min(LastValue(Lowest((Var3 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var2 - Hii)*vis) + Hii),
				LastValue(Lowest((Var1 - Hii)*vis) + Hii)));
	range = Hii - Loo;
	rangePercent = 100 - LowerFreespacePercent - UpperFreespacePercent;
	mult = range / rangePercent;
	result = Loo - mult*LowerFreespacePercent;
	return result;
}


// Lower limit for plotting four variables
function L4 (Var1, Var2, Var3, Var4, LowerFreespacePercent, UpperFreespacePercent)
{
	vis = Status("barvisible");
	Hii		= Max(LastValue(Highest(Var4*vis)), Max(LastValue(Highest(Var3*vis)),
				Max(LastValue(Highest(Var2*vis)), LastValue(Highest(Var1*vis)))));
	Loo	= Min(LastValue(Lowest((Var4 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var3 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var2 - Hii)*vis) + Hii), LastValue(Lowest((Var1 - Hii)*vis) + Hii))));
	range = Hii - Loo;
	rangePercent = 100 - LowerFreespacePercent - UpperFreespacePercent;
	mult = range / rangePercent;
	result = Loo - mult*LowerFreespacePercent;
	return result;
}

// Lower limit for plotting six variables
function L6 (Var1, Var2, Var3, Var4, Var5, Var6, LowerFreespacePercent, UpperFreespacePercent)
{
	vis = Status("barvisible");
	Hii		= Max(LastValue(Highest(Var6*vis)), Max(LastValue(Highest(Var5*vis)), Max(LastValue(Highest(Var4*vis)),
				Max(LastValue(Highest(Var3*vis)), Max(LastValue(Highest(Var2*vis)), LastValue(Highest(Var1*vis)))))));
	Loo	= Min(LastValue(Lowest((Var6 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var5 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var4 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var3 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var2 - Hii)*vis) + Hii), LastValue(Lowest((Var1 - Hii)*vis) + Hii))))));
	range = Hii - Loo;
	rangePercent = 100 - LowerFreespacePercent - UpperFreespacePercent;
	mult = range / rangePercent;
	result = Loo - mult*LowerFreespacePercent;
	return result;
}

// Lower limit for plotting eight variables
function L8 (Var1, Var2, Var3, Var4, Var5, Var6, Var7, Var8, LowerFreespacePercent, UpperFreespacePercent)
{
	vis = Status("barvisible");
	Hii		= Max(LastValue(Highest(Var8*vis)), Max(LastValue(Highest(Var7*vis)),
				Max(LastValue(Highest(Var6*vis)), Max(LastValue(Highest(Var5*vis)), Max(LastValue(Highest(Var4*vis)),
				Max(LastValue(Highest(Var3*vis)), Max(LastValue(Highest(Var2*vis)), LastValue(Highest(Var1*vis)))))))));
	Loo	= Min(LastValue(Lowest((Var8 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var7 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var6 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var5 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var4 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var3 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var2 - Hii)*vis) + Hii), LastValue(Lowest((Var1 - Hii)*vis) + Hii))))))));
	range = Hii - Loo;
	rangePercent = 100 - LowerFreespacePercent - UpperFreespacePercent;
	mult = range / rangePercent;
	result = Loo - mult*LowerFreespacePercent;
	return result;
}

// Upper limit for plotting one variable
function U1 (Var, LowerFreespacePercent, UpperFreespacePercent)
{
	vis = Status("barvisible");
	Hii = LastValue(Highest(Var*vis));
	Loo = LastValue(Lowest((Var - Hii)*vis) + Hii);
	range = Hii - Loo;
	rangePercent = 100 - LowerFreespacePercent - UpperFreespacePercent;
	mult = range / rangePercent;
	result = Hii + mult*UpperFreespacePercent;
	return result;
}

// Upper limit for plotting three variables
function U3 (Var1, Var2, Var3, LowerFreespacePercent, UpperFreespacePercent)
{
	vis = Status("barvisible");
	Hii		= Max(LastValue(Highest(Var3*vis)), Max(LastValue(Highest(Var2*vis)),
				LastValue(Highest(Var1*vis))));
	Loo	= Min(LastValue(Lowest((Var3 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var2 - Hii)*vis) + Hii),
				LastValue(Lowest((Var1 - Hii)*vis) + Hii)));
	range = Hii - Loo;
	rangePercent = 100 - LowerFreespacePercent - UpperFreespacePercent;
	mult = range / rangePercent;
	result = Hii + mult*UpperFreespacePercent;
	return result;
}

// Upper limit for plotting four variables
function U4 (Var1, Var2, Var3, Var4, LowerFreespacePercent, UpperFreespacePercent)
{
	vis = Status("barvisible");
	Hii		= Max(LastValue(Highest(Var4*vis)), Max(LastValue(Highest(Var3*vis)),
				Max(LastValue(Highest(Var2*vis)), LastValue(Highest(Var1*vis)))));
	Loo	= Min(LastValue(Lowest((Var4 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var3 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var2 - Hii)*vis) + Hii), LastValue(Lowest((Var1 - Hii)*vis) + Hii))));
	range = Hii - Loo;
	rangePercent = 100 - LowerFreespacePercent - UpperFreespacePercent;
	mult = range / rangePercent;
	result = Hii + mult*UpperFreespacePercent;
	return result;
}

// Upper limit for plotting six variables
function U6 (Var1, Var2, Var3, Var4, Var5, Var6, LowerFreespacePercent, UpperFreespacePercent)
{
	vis = Status("barvisible");
	Hii		= Max(LastValue(Highest(Var6*vis)), Max(LastValue(Highest(Var5*vis)), Max(LastValue(Highest(Var4*vis)),
				Max(LastValue(Highest(Var3*vis)), Max(LastValue(Highest(Var2*vis)), LastValue(Highest(Var1*vis)))))));
	Loo	= Min(LastValue(Lowest((Var6 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var5 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var4 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var3 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var2 - Hii)*vis) + Hii), LastValue(Lowest((Var1 - Hii)*vis) + Hii))))));
	range = Hii - Loo;
	rangePercent = 100 - LowerFreespacePercent - UpperFreespacePercent;
	mult = range / rangePercent;
	result = Hii + mult*UpperFreespacePercent;
	return result;
}

// Upper limit for plotting eight variables
function U8 (Var1, Var2, Var3, Var4, Var5, Var6, Var7, Var8, LowerFreespacePercent, UpperFreespacePercent)
{
	vis = Status("barvisible");
	Hii		= Max(LastValue(Highest(Var8*vis)), Max(LastValue(Highest(Var7*vis)),
				Max(LastValue(Highest(Var6*vis)), Max(LastValue(Highest(Var5*vis)), Max(LastValue(Highest(Var4*vis)),
				Max(LastValue(Highest(Var3*vis)), Max(LastValue(Highest(Var2*vis)), LastValue(Highest(Var1*vis)))))))));
	Loo	= Min(LastValue(Lowest((Var8 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var7 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var6 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var5 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var4 - Hii)*vis) + Hii), Min(LastValue(Lowest((Var3 - Hii)*vis) + Hii),
				Min(LastValue(Lowest((Var2 - Hii)*vis) + Hii), LastValue(Lowest((Var1 - Hii)*vis) + Hii))))))));
	range = Hii - Loo;
	rangePercent = 100 - LowerFreespacePercent - UpperFreespacePercent;
	mult = range / rangePercent;
	result = Hii + mult*UpperFreespacePercent;
	return result;
}